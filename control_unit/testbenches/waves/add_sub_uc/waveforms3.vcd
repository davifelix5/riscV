$date
	Tue May 30 21:53:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module add_sub_with_uc_tb $end
$scope module UUT $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # pc_next_sel $end
$var wire 1 $ pc_adder_sel $end
$var wire 7 % opcode [6:0] $end
$var wire 64 & mem_out [63:0] $end
$var wire 64 ' mem_addr [63:0] $end
$var wire 1 ( load_pc $end
$var wire 1 ) load_ir $end
$var wire 32 * im_out [31:0] $end
$var wire 64 + dm_out [63:0] $end
$var wire 64 , data_out [63:0] $end
$var wire 1 - addr_sel $end
$var wire 1 . WE_RF $end
$var wire 1 / WE_MEM $end
$var wire 1 0 ULA_din2_sel $end
$var wire 2 1 RF_din_sel [1:0] $end
$scope module DM $end
$var wire 12 2 ADDR [11:0] $end
$var wire 1 ! CLK $end
$var wire 64 3 D_out [63:0] $end
$var wire 1 / WE $end
$var wire 64 4 D_in [63:0] $end
$var parameter 32 5 N $end
$var parameter 32 6 SIZE $end
$upscope $end
$scope module DP $end
$var wire 1 ! CLK $end
$var wire 64 7 DM_out [63:0] $end
$var wire 64 8 data_in [63:0] $end
$var wire 64 9 data_out [63:0] $end
$var wire 1 " reset $end
$var wire 64 : ula [63:0] $end
$var wire 5 ; rs2 [4:0] $end
$var wire 5 < rs1 [4:0] $end
$var wire 5 = rd [4:0] $end
$var wire 64 > pc_secondary_adder [63:0] $end
$var wire 64 ? pc_primary_adder [63:0] $end
$var wire 1 # pc_next_sel $end
$var wire 1 $ pc_adder_sel $end
$var wire 64 @ pc [63:0] $end
$var wire 7 A opcode [6:0] $end
$var wire 64 B mem_addr [63:0] $end
$var wire 1 ( load_pc $end
$var wire 1 ) load_ir $end
$var wire 32 C instruction [31:0] $end
$var wire 64 D im_addr [63:0] $end
$var wire 64 E extended_imm [63:0] $end
$var wire 1 - addr_sel $end
$var wire 1 . WE_RF $end
$var wire 1 0 ULA_din2_sel $end
$var wire 64 F ULA_Din2 [63:0] $end
$var wire 2 G RF_din_sel [1:0] $end
$var wire 64 H RF_Din [63:0] $end
$var wire 1 I LT_UN $end
$var wire 1 J LT_SN $end
$var wire 1 K GT_UN $end
$var wire 1 L GT_SN $end
$var wire 1 M EQ $end
$var wire 64 N Dout_rs2 [63:0] $end
$var wire 64 O Dout_rs1 [63:0] $end
$var parameter 32 P MEM_SIZE $end
$scope module IMM_DECODER $end
$var wire 32 Q instruction [31:0] $end
$var reg 64 R immediate [63:0] $end
$upscope $end
$scope module IR $end
$var wire 1 ! CLK $end
$var wire 32 S IN [31:0] $end
$var wire 1 " RST $end
$var wire 1 ) LOAD $end
$var parameter 32 T SIZE $end
$var reg 32 U OUT [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! CLK $end
$var wire 1 " RST $end
$var wire 3 V func [2:0] $end
$var wire 64 W immediate [63:0] $end
$var wire 7 X opcode [6:0] $end
$var wire 64 Y secondary_adder_res [63:0] $end
$var wire 64 Z primary_adder_res [63:0] $end
$var wire 1 # pc_next_sel $end
$var wire 64 [ pc_next [63:0] $end
$var wire 1 $ pc_adder_sel $end
$var wire 64 \ pc_adder [63:0] $end
$var wire 64 ] pc [63:0] $end
$var wire 1 ^ final_pc_next_sel $end
$var wire 1 _ final_pc_adder_sel $end
$var wire 1 I LT_UN $end
$var wire 1 J LT_SN $end
$var wire 1 ( LOAD $end
$var wire 1 K GT_UN $end
$var wire 1 L GT_SN $end
$var wire 1 M EQ $end
$var wire 64 ` Dout_rs1 [63:0] $end
$var reg 1 a sel $end
$scope module PC $end
$var wire 1 ! CLK $end
$var wire 64 b IN [63:0] $end
$var wire 1 " RST $end
$var wire 1 ( LOAD $end
$var parameter 32 c SIZE $end
$var reg 64 d OUT [63:0] $end
$upscope $end
$scope module primary_adder $end
$var wire 1 e Cin $end
$var wire 64 f X [63:0] $end
$var wire 64 g Y [63:0] $end
$var wire 65 h cins [64:0] $end
$var wire 64 i S [63:0] $end
$var wire 1 j Cout $end
$var parameter 32 k SIZE $end
$scope begin adders[0] $end
$var parameter 2 l i $end
$scope module SOMA $end
$var wire 1 m Cin $end
$var wire 1 n Cout $end
$var wire 1 o S $end
$var wire 1 p X $end
$var wire 1 q Y $end
$var wire 1 r xor1 $end
$upscope $end
$upscope $end
$scope begin adders[1] $end
$var parameter 2 s i $end
$scope module SOMA $end
$var wire 1 t Cin $end
$var wire 1 u Cout $end
$var wire 1 v S $end
$var wire 1 w X $end
$var wire 1 x Y $end
$var wire 1 y xor1 $end
$upscope $end
$upscope $end
$scope begin adders[2] $end
$var parameter 3 z i $end
$scope module SOMA $end
$var wire 1 { Cin $end
$var wire 1 | Cout $end
$var wire 1 } S $end
$var wire 1 ~ X $end
$var wire 1 !" Y $end
$var wire 1 "" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[3] $end
$var parameter 3 #" i $end
$scope module SOMA $end
$var wire 1 $" Cin $end
$var wire 1 %" Cout $end
$var wire 1 &" S $end
$var wire 1 '" X $end
$var wire 1 (" Y $end
$var wire 1 )" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[4] $end
$var parameter 4 *" i $end
$scope module SOMA $end
$var wire 1 +" Cin $end
$var wire 1 ," Cout $end
$var wire 1 -" S $end
$var wire 1 ." X $end
$var wire 1 /" Y $end
$var wire 1 0" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[5] $end
$var parameter 4 1" i $end
$scope module SOMA $end
$var wire 1 2" Cin $end
$var wire 1 3" Cout $end
$var wire 1 4" S $end
$var wire 1 5" X $end
$var wire 1 6" Y $end
$var wire 1 7" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[6] $end
$var parameter 4 8" i $end
$scope module SOMA $end
$var wire 1 9" Cin $end
$var wire 1 :" Cout $end
$var wire 1 ;" S $end
$var wire 1 <" X $end
$var wire 1 =" Y $end
$var wire 1 >" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[7] $end
$var parameter 4 ?" i $end
$scope module SOMA $end
$var wire 1 @" Cin $end
$var wire 1 A" Cout $end
$var wire 1 B" S $end
$var wire 1 C" X $end
$var wire 1 D" Y $end
$var wire 1 E" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[8] $end
$var parameter 5 F" i $end
$scope module SOMA $end
$var wire 1 G" Cin $end
$var wire 1 H" Cout $end
$var wire 1 I" S $end
$var wire 1 J" X $end
$var wire 1 K" Y $end
$var wire 1 L" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[9] $end
$var parameter 5 M" i $end
$scope module SOMA $end
$var wire 1 N" Cin $end
$var wire 1 O" Cout $end
$var wire 1 P" S $end
$var wire 1 Q" X $end
$var wire 1 R" Y $end
$var wire 1 S" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[10] $end
$var parameter 5 T" i $end
$scope module SOMA $end
$var wire 1 U" Cin $end
$var wire 1 V" Cout $end
$var wire 1 W" S $end
$var wire 1 X" X $end
$var wire 1 Y" Y $end
$var wire 1 Z" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[11] $end
$var parameter 5 [" i $end
$scope module SOMA $end
$var wire 1 \" Cin $end
$var wire 1 ]" Cout $end
$var wire 1 ^" S $end
$var wire 1 _" X $end
$var wire 1 `" Y $end
$var wire 1 a" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[12] $end
$var parameter 5 b" i $end
$scope module SOMA $end
$var wire 1 c" Cin $end
$var wire 1 d" Cout $end
$var wire 1 e" S $end
$var wire 1 f" X $end
$var wire 1 g" Y $end
$var wire 1 h" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[13] $end
$var parameter 5 i" i $end
$scope module SOMA $end
$var wire 1 j" Cin $end
$var wire 1 k" Cout $end
$var wire 1 l" S $end
$var wire 1 m" X $end
$var wire 1 n" Y $end
$var wire 1 o" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[14] $end
$var parameter 5 p" i $end
$scope module SOMA $end
$var wire 1 q" Cin $end
$var wire 1 r" Cout $end
$var wire 1 s" S $end
$var wire 1 t" X $end
$var wire 1 u" Y $end
$var wire 1 v" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[15] $end
$var parameter 5 w" i $end
$scope module SOMA $end
$var wire 1 x" Cin $end
$var wire 1 y" Cout $end
$var wire 1 z" S $end
$var wire 1 {" X $end
$var wire 1 |" Y $end
$var wire 1 }" xor1 $end
$upscope $end
$upscope $end
$scope begin adders[16] $end
$var parameter 6 ~" i $end
$scope module SOMA $end
$var wire 1 !# Cin $end
$var wire 1 "# Cout $end
$var wire 1 ## S $end
$var wire 1 $# X $end
$var wire 1 %# Y $end
$var wire 1 &# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[17] $end
$var parameter 6 '# i $end
$scope module SOMA $end
$var wire 1 (# Cin $end
$var wire 1 )# Cout $end
$var wire 1 *# S $end
$var wire 1 +# X $end
$var wire 1 ,# Y $end
$var wire 1 -# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[18] $end
$var parameter 6 .# i $end
$scope module SOMA $end
$var wire 1 /# Cin $end
$var wire 1 0# Cout $end
$var wire 1 1# S $end
$var wire 1 2# X $end
$var wire 1 3# Y $end
$var wire 1 4# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[19] $end
$var parameter 6 5# i $end
$scope module SOMA $end
$var wire 1 6# Cin $end
$var wire 1 7# Cout $end
$var wire 1 8# S $end
$var wire 1 9# X $end
$var wire 1 :# Y $end
$var wire 1 ;# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[20] $end
$var parameter 6 <# i $end
$scope module SOMA $end
$var wire 1 =# Cin $end
$var wire 1 ># Cout $end
$var wire 1 ?# S $end
$var wire 1 @# X $end
$var wire 1 A# Y $end
$var wire 1 B# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[21] $end
$var parameter 6 C# i $end
$scope module SOMA $end
$var wire 1 D# Cin $end
$var wire 1 E# Cout $end
$var wire 1 F# S $end
$var wire 1 G# X $end
$var wire 1 H# Y $end
$var wire 1 I# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[22] $end
$var parameter 6 J# i $end
$scope module SOMA $end
$var wire 1 K# Cin $end
$var wire 1 L# Cout $end
$var wire 1 M# S $end
$var wire 1 N# X $end
$var wire 1 O# Y $end
$var wire 1 P# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[23] $end
$var parameter 6 Q# i $end
$scope module SOMA $end
$var wire 1 R# Cin $end
$var wire 1 S# Cout $end
$var wire 1 T# S $end
$var wire 1 U# X $end
$var wire 1 V# Y $end
$var wire 1 W# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[24] $end
$var parameter 6 X# i $end
$scope module SOMA $end
$var wire 1 Y# Cin $end
$var wire 1 Z# Cout $end
$var wire 1 [# S $end
$var wire 1 \# X $end
$var wire 1 ]# Y $end
$var wire 1 ^# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[25] $end
$var parameter 6 _# i $end
$scope module SOMA $end
$var wire 1 `# Cin $end
$var wire 1 a# Cout $end
$var wire 1 b# S $end
$var wire 1 c# X $end
$var wire 1 d# Y $end
$var wire 1 e# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[26] $end
$var parameter 6 f# i $end
$scope module SOMA $end
$var wire 1 g# Cin $end
$var wire 1 h# Cout $end
$var wire 1 i# S $end
$var wire 1 j# X $end
$var wire 1 k# Y $end
$var wire 1 l# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[27] $end
$var parameter 6 m# i $end
$scope module SOMA $end
$var wire 1 n# Cin $end
$var wire 1 o# Cout $end
$var wire 1 p# S $end
$var wire 1 q# X $end
$var wire 1 r# Y $end
$var wire 1 s# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[28] $end
$var parameter 6 t# i $end
$scope module SOMA $end
$var wire 1 u# Cin $end
$var wire 1 v# Cout $end
$var wire 1 w# S $end
$var wire 1 x# X $end
$var wire 1 y# Y $end
$var wire 1 z# xor1 $end
$upscope $end
$upscope $end
$scope begin adders[29] $end
$var parameter 6 {# i $end
$scope module SOMA $end
$var wire 1 |# Cin $end
$var wire 1 }# Cout $end
$var wire 1 ~# S $end
$var wire 1 !$ X $end
$var wire 1 "$ Y $end
$var wire 1 #$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[30] $end
$var parameter 6 $$ i $end
$scope module SOMA $end
$var wire 1 %$ Cin $end
$var wire 1 &$ Cout $end
$var wire 1 '$ S $end
$var wire 1 ($ X $end
$var wire 1 )$ Y $end
$var wire 1 *$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[31] $end
$var parameter 6 +$ i $end
$scope module SOMA $end
$var wire 1 ,$ Cin $end
$var wire 1 -$ Cout $end
$var wire 1 .$ S $end
$var wire 1 /$ X $end
$var wire 1 0$ Y $end
$var wire 1 1$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[32] $end
$var parameter 7 2$ i $end
$scope module SOMA $end
$var wire 1 3$ Cin $end
$var wire 1 4$ Cout $end
$var wire 1 5$ S $end
$var wire 1 6$ X $end
$var wire 1 7$ Y $end
$var wire 1 8$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[33] $end
$var parameter 7 9$ i $end
$scope module SOMA $end
$var wire 1 :$ Cin $end
$var wire 1 ;$ Cout $end
$var wire 1 <$ S $end
$var wire 1 =$ X $end
$var wire 1 >$ Y $end
$var wire 1 ?$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[34] $end
$var parameter 7 @$ i $end
$scope module SOMA $end
$var wire 1 A$ Cin $end
$var wire 1 B$ Cout $end
$var wire 1 C$ S $end
$var wire 1 D$ X $end
$var wire 1 E$ Y $end
$var wire 1 F$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[35] $end
$var parameter 7 G$ i $end
$scope module SOMA $end
$var wire 1 H$ Cin $end
$var wire 1 I$ Cout $end
$var wire 1 J$ S $end
$var wire 1 K$ X $end
$var wire 1 L$ Y $end
$var wire 1 M$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[36] $end
$var parameter 7 N$ i $end
$scope module SOMA $end
$var wire 1 O$ Cin $end
$var wire 1 P$ Cout $end
$var wire 1 Q$ S $end
$var wire 1 R$ X $end
$var wire 1 S$ Y $end
$var wire 1 T$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[37] $end
$var parameter 7 U$ i $end
$scope module SOMA $end
$var wire 1 V$ Cin $end
$var wire 1 W$ Cout $end
$var wire 1 X$ S $end
$var wire 1 Y$ X $end
$var wire 1 Z$ Y $end
$var wire 1 [$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[38] $end
$var parameter 7 \$ i $end
$scope module SOMA $end
$var wire 1 ]$ Cin $end
$var wire 1 ^$ Cout $end
$var wire 1 _$ S $end
$var wire 1 `$ X $end
$var wire 1 a$ Y $end
$var wire 1 b$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[39] $end
$var parameter 7 c$ i $end
$scope module SOMA $end
$var wire 1 d$ Cin $end
$var wire 1 e$ Cout $end
$var wire 1 f$ S $end
$var wire 1 g$ X $end
$var wire 1 h$ Y $end
$var wire 1 i$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[40] $end
$var parameter 7 j$ i $end
$scope module SOMA $end
$var wire 1 k$ Cin $end
$var wire 1 l$ Cout $end
$var wire 1 m$ S $end
$var wire 1 n$ X $end
$var wire 1 o$ Y $end
$var wire 1 p$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[41] $end
$var parameter 7 q$ i $end
$scope module SOMA $end
$var wire 1 r$ Cin $end
$var wire 1 s$ Cout $end
$var wire 1 t$ S $end
$var wire 1 u$ X $end
$var wire 1 v$ Y $end
$var wire 1 w$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[42] $end
$var parameter 7 x$ i $end
$scope module SOMA $end
$var wire 1 y$ Cin $end
$var wire 1 z$ Cout $end
$var wire 1 {$ S $end
$var wire 1 |$ X $end
$var wire 1 }$ Y $end
$var wire 1 ~$ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[43] $end
$var parameter 7 !% i $end
$scope module SOMA $end
$var wire 1 "% Cin $end
$var wire 1 #% Cout $end
$var wire 1 $% S $end
$var wire 1 %% X $end
$var wire 1 &% Y $end
$var wire 1 '% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[44] $end
$var parameter 7 (% i $end
$scope module SOMA $end
$var wire 1 )% Cin $end
$var wire 1 *% Cout $end
$var wire 1 +% S $end
$var wire 1 ,% X $end
$var wire 1 -% Y $end
$var wire 1 .% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[45] $end
$var parameter 7 /% i $end
$scope module SOMA $end
$var wire 1 0% Cin $end
$var wire 1 1% Cout $end
$var wire 1 2% S $end
$var wire 1 3% X $end
$var wire 1 4% Y $end
$var wire 1 5% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[46] $end
$var parameter 7 6% i $end
$scope module SOMA $end
$var wire 1 7% Cin $end
$var wire 1 8% Cout $end
$var wire 1 9% S $end
$var wire 1 :% X $end
$var wire 1 ;% Y $end
$var wire 1 <% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[47] $end
$var parameter 7 =% i $end
$scope module SOMA $end
$var wire 1 >% Cin $end
$var wire 1 ?% Cout $end
$var wire 1 @% S $end
$var wire 1 A% X $end
$var wire 1 B% Y $end
$var wire 1 C% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[48] $end
$var parameter 7 D% i $end
$scope module SOMA $end
$var wire 1 E% Cin $end
$var wire 1 F% Cout $end
$var wire 1 G% S $end
$var wire 1 H% X $end
$var wire 1 I% Y $end
$var wire 1 J% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[49] $end
$var parameter 7 K% i $end
$scope module SOMA $end
$var wire 1 L% Cin $end
$var wire 1 M% Cout $end
$var wire 1 N% S $end
$var wire 1 O% X $end
$var wire 1 P% Y $end
$var wire 1 Q% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[50] $end
$var parameter 7 R% i $end
$scope module SOMA $end
$var wire 1 S% Cin $end
$var wire 1 T% Cout $end
$var wire 1 U% S $end
$var wire 1 V% X $end
$var wire 1 W% Y $end
$var wire 1 X% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[51] $end
$var parameter 7 Y% i $end
$scope module SOMA $end
$var wire 1 Z% Cin $end
$var wire 1 [% Cout $end
$var wire 1 \% S $end
$var wire 1 ]% X $end
$var wire 1 ^% Y $end
$var wire 1 _% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[52] $end
$var parameter 7 `% i $end
$scope module SOMA $end
$var wire 1 a% Cin $end
$var wire 1 b% Cout $end
$var wire 1 c% S $end
$var wire 1 d% X $end
$var wire 1 e% Y $end
$var wire 1 f% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[53] $end
$var parameter 7 g% i $end
$scope module SOMA $end
$var wire 1 h% Cin $end
$var wire 1 i% Cout $end
$var wire 1 j% S $end
$var wire 1 k% X $end
$var wire 1 l% Y $end
$var wire 1 m% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[54] $end
$var parameter 7 n% i $end
$scope module SOMA $end
$var wire 1 o% Cin $end
$var wire 1 p% Cout $end
$var wire 1 q% S $end
$var wire 1 r% X $end
$var wire 1 s% Y $end
$var wire 1 t% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[55] $end
$var parameter 7 u% i $end
$scope module SOMA $end
$var wire 1 v% Cin $end
$var wire 1 w% Cout $end
$var wire 1 x% S $end
$var wire 1 y% X $end
$var wire 1 z% Y $end
$var wire 1 {% xor1 $end
$upscope $end
$upscope $end
$scope begin adders[56] $end
$var parameter 7 |% i $end
$scope module SOMA $end
$var wire 1 }% Cin $end
$var wire 1 ~% Cout $end
$var wire 1 !& S $end
$var wire 1 "& X $end
$var wire 1 #& Y $end
$var wire 1 $& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[57] $end
$var parameter 7 %& i $end
$scope module SOMA $end
$var wire 1 && Cin $end
$var wire 1 '& Cout $end
$var wire 1 (& S $end
$var wire 1 )& X $end
$var wire 1 *& Y $end
$var wire 1 +& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[58] $end
$var parameter 7 ,& i $end
$scope module SOMA $end
$var wire 1 -& Cin $end
$var wire 1 .& Cout $end
$var wire 1 /& S $end
$var wire 1 0& X $end
$var wire 1 1& Y $end
$var wire 1 2& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[59] $end
$var parameter 7 3& i $end
$scope module SOMA $end
$var wire 1 4& Cin $end
$var wire 1 5& Cout $end
$var wire 1 6& S $end
$var wire 1 7& X $end
$var wire 1 8& Y $end
$var wire 1 9& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[60] $end
$var parameter 7 :& i $end
$scope module SOMA $end
$var wire 1 ;& Cin $end
$var wire 1 <& Cout $end
$var wire 1 =& S $end
$var wire 1 >& X $end
$var wire 1 ?& Y $end
$var wire 1 @& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[61] $end
$var parameter 7 A& i $end
$scope module SOMA $end
$var wire 1 B& Cin $end
$var wire 1 C& Cout $end
$var wire 1 D& S $end
$var wire 1 E& X $end
$var wire 1 F& Y $end
$var wire 1 G& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[62] $end
$var parameter 7 H& i $end
$scope module SOMA $end
$var wire 1 I& Cin $end
$var wire 1 J& Cout $end
$var wire 1 K& S $end
$var wire 1 L& X $end
$var wire 1 M& Y $end
$var wire 1 N& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[63] $end
$var parameter 7 O& i $end
$scope module SOMA $end
$var wire 1 P& Cin $end
$var wire 1 Q& Cout $end
$var wire 1 R& S $end
$var wire 1 S& X $end
$var wire 1 T& Y $end
$var wire 1 U& xor1 $end
$upscope $end
$upscope $end
$upscope $end
$scope module secondary_adder $end
$var wire 1 V& Cin $end
$var wire 64 W& X [63:0] $end
$var wire 64 X& Y [63:0] $end
$var wire 65 Y& cins [64:0] $end
$var wire 64 Z& S [63:0] $end
$var wire 1 [& Cout $end
$var parameter 32 \& SIZE $end
$scope begin adders[0] $end
$var parameter 2 ]& i $end
$scope module SOMA $end
$var wire 1 ^& Cin $end
$var wire 1 _& Cout $end
$var wire 1 `& S $end
$var wire 1 a& X $end
$var wire 1 b& Y $end
$var wire 1 c& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[1] $end
$var parameter 2 d& i $end
$scope module SOMA $end
$var wire 1 e& Cin $end
$var wire 1 f& Cout $end
$var wire 1 g& S $end
$var wire 1 h& X $end
$var wire 1 i& Y $end
$var wire 1 j& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[2] $end
$var parameter 3 k& i $end
$scope module SOMA $end
$var wire 1 l& Cin $end
$var wire 1 m& Cout $end
$var wire 1 n& S $end
$var wire 1 o& X $end
$var wire 1 p& Y $end
$var wire 1 q& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[3] $end
$var parameter 3 r& i $end
$scope module SOMA $end
$var wire 1 s& Cin $end
$var wire 1 t& Cout $end
$var wire 1 u& S $end
$var wire 1 v& X $end
$var wire 1 w& Y $end
$var wire 1 x& xor1 $end
$upscope $end
$upscope $end
$scope begin adders[4] $end
$var parameter 4 y& i $end
$scope module SOMA $end
$var wire 1 z& Cin $end
$var wire 1 {& Cout $end
$var wire 1 |& S $end
$var wire 1 }& X $end
$var wire 1 ~& Y $end
$var wire 1 !' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[5] $end
$var parameter 4 "' i $end
$scope module SOMA $end
$var wire 1 #' Cin $end
$var wire 1 $' Cout $end
$var wire 1 %' S $end
$var wire 1 &' X $end
$var wire 1 '' Y $end
$var wire 1 (' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[6] $end
$var parameter 4 )' i $end
$scope module SOMA $end
$var wire 1 *' Cin $end
$var wire 1 +' Cout $end
$var wire 1 ,' S $end
$var wire 1 -' X $end
$var wire 1 .' Y $end
$var wire 1 /' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[7] $end
$var parameter 4 0' i $end
$scope module SOMA $end
$var wire 1 1' Cin $end
$var wire 1 2' Cout $end
$var wire 1 3' S $end
$var wire 1 4' X $end
$var wire 1 5' Y $end
$var wire 1 6' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[8] $end
$var parameter 5 7' i $end
$scope module SOMA $end
$var wire 1 8' Cin $end
$var wire 1 9' Cout $end
$var wire 1 :' S $end
$var wire 1 ;' X $end
$var wire 1 <' Y $end
$var wire 1 =' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[9] $end
$var parameter 5 >' i $end
$scope module SOMA $end
$var wire 1 ?' Cin $end
$var wire 1 @' Cout $end
$var wire 1 A' S $end
$var wire 1 B' X $end
$var wire 1 C' Y $end
$var wire 1 D' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[10] $end
$var parameter 5 E' i $end
$scope module SOMA $end
$var wire 1 F' Cin $end
$var wire 1 G' Cout $end
$var wire 1 H' S $end
$var wire 1 I' X $end
$var wire 1 J' Y $end
$var wire 1 K' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[11] $end
$var parameter 5 L' i $end
$scope module SOMA $end
$var wire 1 M' Cin $end
$var wire 1 N' Cout $end
$var wire 1 O' S $end
$var wire 1 P' X $end
$var wire 1 Q' Y $end
$var wire 1 R' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[12] $end
$var parameter 5 S' i $end
$scope module SOMA $end
$var wire 1 T' Cin $end
$var wire 1 U' Cout $end
$var wire 1 V' S $end
$var wire 1 W' X $end
$var wire 1 X' Y $end
$var wire 1 Y' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[13] $end
$var parameter 5 Z' i $end
$scope module SOMA $end
$var wire 1 [' Cin $end
$var wire 1 \' Cout $end
$var wire 1 ]' S $end
$var wire 1 ^' X $end
$var wire 1 _' Y $end
$var wire 1 `' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[14] $end
$var parameter 5 a' i $end
$scope module SOMA $end
$var wire 1 b' Cin $end
$var wire 1 c' Cout $end
$var wire 1 d' S $end
$var wire 1 e' X $end
$var wire 1 f' Y $end
$var wire 1 g' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[15] $end
$var parameter 5 h' i $end
$scope module SOMA $end
$var wire 1 i' Cin $end
$var wire 1 j' Cout $end
$var wire 1 k' S $end
$var wire 1 l' X $end
$var wire 1 m' Y $end
$var wire 1 n' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[16] $end
$var parameter 6 o' i $end
$scope module SOMA $end
$var wire 1 p' Cin $end
$var wire 1 q' Cout $end
$var wire 1 r' S $end
$var wire 1 s' X $end
$var wire 1 t' Y $end
$var wire 1 u' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[17] $end
$var parameter 6 v' i $end
$scope module SOMA $end
$var wire 1 w' Cin $end
$var wire 1 x' Cout $end
$var wire 1 y' S $end
$var wire 1 z' X $end
$var wire 1 {' Y $end
$var wire 1 |' xor1 $end
$upscope $end
$upscope $end
$scope begin adders[18] $end
$var parameter 6 }' i $end
$scope module SOMA $end
$var wire 1 ~' Cin $end
$var wire 1 !( Cout $end
$var wire 1 "( S $end
$var wire 1 #( X $end
$var wire 1 $( Y $end
$var wire 1 %( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[19] $end
$var parameter 6 &( i $end
$scope module SOMA $end
$var wire 1 '( Cin $end
$var wire 1 (( Cout $end
$var wire 1 )( S $end
$var wire 1 *( X $end
$var wire 1 +( Y $end
$var wire 1 ,( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[20] $end
$var parameter 6 -( i $end
$scope module SOMA $end
$var wire 1 .( Cin $end
$var wire 1 /( Cout $end
$var wire 1 0( S $end
$var wire 1 1( X $end
$var wire 1 2( Y $end
$var wire 1 3( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[21] $end
$var parameter 6 4( i $end
$scope module SOMA $end
$var wire 1 5( Cin $end
$var wire 1 6( Cout $end
$var wire 1 7( S $end
$var wire 1 8( X $end
$var wire 1 9( Y $end
$var wire 1 :( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[22] $end
$var parameter 6 ;( i $end
$scope module SOMA $end
$var wire 1 <( Cin $end
$var wire 1 =( Cout $end
$var wire 1 >( S $end
$var wire 1 ?( X $end
$var wire 1 @( Y $end
$var wire 1 A( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[23] $end
$var parameter 6 B( i $end
$scope module SOMA $end
$var wire 1 C( Cin $end
$var wire 1 D( Cout $end
$var wire 1 E( S $end
$var wire 1 F( X $end
$var wire 1 G( Y $end
$var wire 1 H( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[24] $end
$var parameter 6 I( i $end
$scope module SOMA $end
$var wire 1 J( Cin $end
$var wire 1 K( Cout $end
$var wire 1 L( S $end
$var wire 1 M( X $end
$var wire 1 N( Y $end
$var wire 1 O( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[25] $end
$var parameter 6 P( i $end
$scope module SOMA $end
$var wire 1 Q( Cin $end
$var wire 1 R( Cout $end
$var wire 1 S( S $end
$var wire 1 T( X $end
$var wire 1 U( Y $end
$var wire 1 V( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[26] $end
$var parameter 6 W( i $end
$scope module SOMA $end
$var wire 1 X( Cin $end
$var wire 1 Y( Cout $end
$var wire 1 Z( S $end
$var wire 1 [( X $end
$var wire 1 \( Y $end
$var wire 1 ]( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[27] $end
$var parameter 6 ^( i $end
$scope module SOMA $end
$var wire 1 _( Cin $end
$var wire 1 `( Cout $end
$var wire 1 a( S $end
$var wire 1 b( X $end
$var wire 1 c( Y $end
$var wire 1 d( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[28] $end
$var parameter 6 e( i $end
$scope module SOMA $end
$var wire 1 f( Cin $end
$var wire 1 g( Cout $end
$var wire 1 h( S $end
$var wire 1 i( X $end
$var wire 1 j( Y $end
$var wire 1 k( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[29] $end
$var parameter 6 l( i $end
$scope module SOMA $end
$var wire 1 m( Cin $end
$var wire 1 n( Cout $end
$var wire 1 o( S $end
$var wire 1 p( X $end
$var wire 1 q( Y $end
$var wire 1 r( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[30] $end
$var parameter 6 s( i $end
$scope module SOMA $end
$var wire 1 t( Cin $end
$var wire 1 u( Cout $end
$var wire 1 v( S $end
$var wire 1 w( X $end
$var wire 1 x( Y $end
$var wire 1 y( xor1 $end
$upscope $end
$upscope $end
$scope begin adders[31] $end
$var parameter 6 z( i $end
$scope module SOMA $end
$var wire 1 {( Cin $end
$var wire 1 |( Cout $end
$var wire 1 }( S $end
$var wire 1 ~( X $end
$var wire 1 !) Y $end
$var wire 1 ") xor1 $end
$upscope $end
$upscope $end
$scope begin adders[32] $end
$var parameter 7 #) i $end
$scope module SOMA $end
$var wire 1 $) Cin $end
$var wire 1 %) Cout $end
$var wire 1 &) S $end
$var wire 1 ') X $end
$var wire 1 () Y $end
$var wire 1 )) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[33] $end
$var parameter 7 *) i $end
$scope module SOMA $end
$var wire 1 +) Cin $end
$var wire 1 ,) Cout $end
$var wire 1 -) S $end
$var wire 1 .) X $end
$var wire 1 /) Y $end
$var wire 1 0) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[34] $end
$var parameter 7 1) i $end
$scope module SOMA $end
$var wire 1 2) Cin $end
$var wire 1 3) Cout $end
$var wire 1 4) S $end
$var wire 1 5) X $end
$var wire 1 6) Y $end
$var wire 1 7) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[35] $end
$var parameter 7 8) i $end
$scope module SOMA $end
$var wire 1 9) Cin $end
$var wire 1 :) Cout $end
$var wire 1 ;) S $end
$var wire 1 <) X $end
$var wire 1 =) Y $end
$var wire 1 >) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[36] $end
$var parameter 7 ?) i $end
$scope module SOMA $end
$var wire 1 @) Cin $end
$var wire 1 A) Cout $end
$var wire 1 B) S $end
$var wire 1 C) X $end
$var wire 1 D) Y $end
$var wire 1 E) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[37] $end
$var parameter 7 F) i $end
$scope module SOMA $end
$var wire 1 G) Cin $end
$var wire 1 H) Cout $end
$var wire 1 I) S $end
$var wire 1 J) X $end
$var wire 1 K) Y $end
$var wire 1 L) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[38] $end
$var parameter 7 M) i $end
$scope module SOMA $end
$var wire 1 N) Cin $end
$var wire 1 O) Cout $end
$var wire 1 P) S $end
$var wire 1 Q) X $end
$var wire 1 R) Y $end
$var wire 1 S) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[39] $end
$var parameter 7 T) i $end
$scope module SOMA $end
$var wire 1 U) Cin $end
$var wire 1 V) Cout $end
$var wire 1 W) S $end
$var wire 1 X) X $end
$var wire 1 Y) Y $end
$var wire 1 Z) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[40] $end
$var parameter 7 [) i $end
$scope module SOMA $end
$var wire 1 \) Cin $end
$var wire 1 ]) Cout $end
$var wire 1 ^) S $end
$var wire 1 _) X $end
$var wire 1 `) Y $end
$var wire 1 a) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[41] $end
$var parameter 7 b) i $end
$scope module SOMA $end
$var wire 1 c) Cin $end
$var wire 1 d) Cout $end
$var wire 1 e) S $end
$var wire 1 f) X $end
$var wire 1 g) Y $end
$var wire 1 h) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[42] $end
$var parameter 7 i) i $end
$scope module SOMA $end
$var wire 1 j) Cin $end
$var wire 1 k) Cout $end
$var wire 1 l) S $end
$var wire 1 m) X $end
$var wire 1 n) Y $end
$var wire 1 o) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[43] $end
$var parameter 7 p) i $end
$scope module SOMA $end
$var wire 1 q) Cin $end
$var wire 1 r) Cout $end
$var wire 1 s) S $end
$var wire 1 t) X $end
$var wire 1 u) Y $end
$var wire 1 v) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[44] $end
$var parameter 7 w) i $end
$scope module SOMA $end
$var wire 1 x) Cin $end
$var wire 1 y) Cout $end
$var wire 1 z) S $end
$var wire 1 {) X $end
$var wire 1 |) Y $end
$var wire 1 }) xor1 $end
$upscope $end
$upscope $end
$scope begin adders[45] $end
$var parameter 7 ~) i $end
$scope module SOMA $end
$var wire 1 !* Cin $end
$var wire 1 "* Cout $end
$var wire 1 #* S $end
$var wire 1 $* X $end
$var wire 1 %* Y $end
$var wire 1 &* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[46] $end
$var parameter 7 '* i $end
$scope module SOMA $end
$var wire 1 (* Cin $end
$var wire 1 )* Cout $end
$var wire 1 ** S $end
$var wire 1 +* X $end
$var wire 1 ,* Y $end
$var wire 1 -* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[47] $end
$var parameter 7 .* i $end
$scope module SOMA $end
$var wire 1 /* Cin $end
$var wire 1 0* Cout $end
$var wire 1 1* S $end
$var wire 1 2* X $end
$var wire 1 3* Y $end
$var wire 1 4* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[48] $end
$var parameter 7 5* i $end
$scope module SOMA $end
$var wire 1 6* Cin $end
$var wire 1 7* Cout $end
$var wire 1 8* S $end
$var wire 1 9* X $end
$var wire 1 :* Y $end
$var wire 1 ;* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[49] $end
$var parameter 7 <* i $end
$scope module SOMA $end
$var wire 1 =* Cin $end
$var wire 1 >* Cout $end
$var wire 1 ?* S $end
$var wire 1 @* X $end
$var wire 1 A* Y $end
$var wire 1 B* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[50] $end
$var parameter 7 C* i $end
$scope module SOMA $end
$var wire 1 D* Cin $end
$var wire 1 E* Cout $end
$var wire 1 F* S $end
$var wire 1 G* X $end
$var wire 1 H* Y $end
$var wire 1 I* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[51] $end
$var parameter 7 J* i $end
$scope module SOMA $end
$var wire 1 K* Cin $end
$var wire 1 L* Cout $end
$var wire 1 M* S $end
$var wire 1 N* X $end
$var wire 1 O* Y $end
$var wire 1 P* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[52] $end
$var parameter 7 Q* i $end
$scope module SOMA $end
$var wire 1 R* Cin $end
$var wire 1 S* Cout $end
$var wire 1 T* S $end
$var wire 1 U* X $end
$var wire 1 V* Y $end
$var wire 1 W* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[53] $end
$var parameter 7 X* i $end
$scope module SOMA $end
$var wire 1 Y* Cin $end
$var wire 1 Z* Cout $end
$var wire 1 [* S $end
$var wire 1 \* X $end
$var wire 1 ]* Y $end
$var wire 1 ^* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[54] $end
$var parameter 7 _* i $end
$scope module SOMA $end
$var wire 1 `* Cin $end
$var wire 1 a* Cout $end
$var wire 1 b* S $end
$var wire 1 c* X $end
$var wire 1 d* Y $end
$var wire 1 e* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[55] $end
$var parameter 7 f* i $end
$scope module SOMA $end
$var wire 1 g* Cin $end
$var wire 1 h* Cout $end
$var wire 1 i* S $end
$var wire 1 j* X $end
$var wire 1 k* Y $end
$var wire 1 l* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[56] $end
$var parameter 7 m* i $end
$scope module SOMA $end
$var wire 1 n* Cin $end
$var wire 1 o* Cout $end
$var wire 1 p* S $end
$var wire 1 q* X $end
$var wire 1 r* Y $end
$var wire 1 s* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[57] $end
$var parameter 7 t* i $end
$scope module SOMA $end
$var wire 1 u* Cin $end
$var wire 1 v* Cout $end
$var wire 1 w* S $end
$var wire 1 x* X $end
$var wire 1 y* Y $end
$var wire 1 z* xor1 $end
$upscope $end
$upscope $end
$scope begin adders[58] $end
$var parameter 7 {* i $end
$scope module SOMA $end
$var wire 1 |* Cin $end
$var wire 1 }* Cout $end
$var wire 1 ~* S $end
$var wire 1 !+ X $end
$var wire 1 "+ Y $end
$var wire 1 #+ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[59] $end
$var parameter 7 $+ i $end
$scope module SOMA $end
$var wire 1 %+ Cin $end
$var wire 1 &+ Cout $end
$var wire 1 '+ S $end
$var wire 1 (+ X $end
$var wire 1 )+ Y $end
$var wire 1 *+ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[60] $end
$var parameter 7 ++ i $end
$scope module SOMA $end
$var wire 1 ,+ Cin $end
$var wire 1 -+ Cout $end
$var wire 1 .+ S $end
$var wire 1 /+ X $end
$var wire 1 0+ Y $end
$var wire 1 1+ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[61] $end
$var parameter 7 2+ i $end
$scope module SOMA $end
$var wire 1 3+ Cin $end
$var wire 1 4+ Cout $end
$var wire 1 5+ S $end
$var wire 1 6+ X $end
$var wire 1 7+ Y $end
$var wire 1 8+ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[62] $end
$var parameter 7 9+ i $end
$scope module SOMA $end
$var wire 1 :+ Cin $end
$var wire 1 ;+ Cout $end
$var wire 1 <+ S $end
$var wire 1 =+ X $end
$var wire 1 >+ Y $end
$var wire 1 ?+ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[63] $end
$var parameter 7 @+ i $end
$scope module SOMA $end
$var wire 1 A+ Cin $end
$var wire 1 B+ Cout $end
$var wire 1 C+ S $end
$var wire 1 D+ X $end
$var wire 1 E+ Y $end
$var wire 1 F+ xor1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module RF $end
$var wire 1 ! CLK $end
$var wire 64 G+ D1 [63:0] $end
$var wire 64 H+ D2 [63:0] $end
$var wire 64 I+ Din [63:0] $end
$var wire 5 J+ rd [4:0] $end
$var wire 5 K+ rs1 [4:0] $end
$var wire 5 L+ rs2 [4:0] $end
$var wire 32 M+ loaders [31:0] $end
$var wire 1 . WE $end
$var parameter 32 N+ SIZE $end
$scope begin registers[1] $end
$var parameter 2 O+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 P+ IN [63:0] $end
$var wire 1 Q+ LOAD $end
$var parameter 32 R+ SIZE $end
$var reg 64 S+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[2] $end
$var parameter 3 T+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 U+ IN [63:0] $end
$var wire 1 V+ LOAD $end
$var parameter 32 W+ SIZE $end
$var reg 64 X+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[3] $end
$var parameter 3 Y+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 Z+ IN [63:0] $end
$var wire 1 [+ LOAD $end
$var parameter 32 \+ SIZE $end
$var reg 64 ]+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[4] $end
$var parameter 4 ^+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 _+ IN [63:0] $end
$var wire 1 `+ LOAD $end
$var parameter 32 a+ SIZE $end
$var reg 64 b+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[5] $end
$var parameter 4 c+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 d+ IN [63:0] $end
$var wire 1 e+ LOAD $end
$var parameter 32 f+ SIZE $end
$var reg 64 g+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[6] $end
$var parameter 4 h+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 i+ IN [63:0] $end
$var wire 1 j+ LOAD $end
$var parameter 32 k+ SIZE $end
$var reg 64 l+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[7] $end
$var parameter 4 m+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 n+ IN [63:0] $end
$var wire 1 o+ LOAD $end
$var parameter 32 p+ SIZE $end
$var reg 64 q+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[8] $end
$var parameter 5 r+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 s+ IN [63:0] $end
$var wire 1 t+ LOAD $end
$var parameter 32 u+ SIZE $end
$var reg 64 v+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[9] $end
$var parameter 5 w+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 x+ IN [63:0] $end
$var wire 1 y+ LOAD $end
$var parameter 32 z+ SIZE $end
$var reg 64 {+ OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[10] $end
$var parameter 5 |+ i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 }+ IN [63:0] $end
$var wire 1 ~+ LOAD $end
$var parameter 32 !, SIZE $end
$var reg 64 ", OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[11] $end
$var parameter 5 #, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 $, IN [63:0] $end
$var wire 1 %, LOAD $end
$var parameter 32 &, SIZE $end
$var reg 64 ', OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[12] $end
$var parameter 5 (, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 ), IN [63:0] $end
$var wire 1 *, LOAD $end
$var parameter 32 +, SIZE $end
$var reg 64 ,, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[13] $end
$var parameter 5 -, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 ., IN [63:0] $end
$var wire 1 /, LOAD $end
$var parameter 32 0, SIZE $end
$var reg 64 1, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[14] $end
$var parameter 5 2, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 3, IN [63:0] $end
$var wire 1 4, LOAD $end
$var parameter 32 5, SIZE $end
$var reg 64 6, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[15] $end
$var parameter 5 7, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 8, IN [63:0] $end
$var wire 1 9, LOAD $end
$var parameter 32 :, SIZE $end
$var reg 64 ;, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[16] $end
$var parameter 6 <, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 =, IN [63:0] $end
$var wire 1 >, LOAD $end
$var parameter 32 ?, SIZE $end
$var reg 64 @, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[17] $end
$var parameter 6 A, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 B, IN [63:0] $end
$var wire 1 C, LOAD $end
$var parameter 32 D, SIZE $end
$var reg 64 E, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[18] $end
$var parameter 6 F, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 G, IN [63:0] $end
$var wire 1 H, LOAD $end
$var parameter 32 I, SIZE $end
$var reg 64 J, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[19] $end
$var parameter 6 K, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 L, IN [63:0] $end
$var wire 1 M, LOAD $end
$var parameter 32 N, SIZE $end
$var reg 64 O, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[20] $end
$var parameter 6 P, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 Q, IN [63:0] $end
$var wire 1 R, LOAD $end
$var parameter 32 S, SIZE $end
$var reg 64 T, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[21] $end
$var parameter 6 U, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 V, IN [63:0] $end
$var wire 1 W, LOAD $end
$var parameter 32 X, SIZE $end
$var reg 64 Y, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[22] $end
$var parameter 6 Z, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 [, IN [63:0] $end
$var wire 1 \, LOAD $end
$var parameter 32 ], SIZE $end
$var reg 64 ^, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[23] $end
$var parameter 6 _, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 `, IN [63:0] $end
$var wire 1 a, LOAD $end
$var parameter 32 b, SIZE $end
$var reg 64 c, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[24] $end
$var parameter 6 d, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 e, IN [63:0] $end
$var wire 1 f, LOAD $end
$var parameter 32 g, SIZE $end
$var reg 64 h, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[25] $end
$var parameter 6 i, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 j, IN [63:0] $end
$var wire 1 k, LOAD $end
$var parameter 32 l, SIZE $end
$var reg 64 m, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[26] $end
$var parameter 6 n, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 o, IN [63:0] $end
$var wire 1 p, LOAD $end
$var parameter 32 q, SIZE $end
$var reg 64 r, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[27] $end
$var parameter 6 s, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 t, IN [63:0] $end
$var wire 1 u, LOAD $end
$var parameter 32 v, SIZE $end
$var reg 64 w, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[28] $end
$var parameter 6 x, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 y, IN [63:0] $end
$var wire 1 z, LOAD $end
$var parameter 32 {, SIZE $end
$var reg 64 |, OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[29] $end
$var parameter 6 }, i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 ~, IN [63:0] $end
$var wire 1 !- LOAD $end
$var parameter 32 "- SIZE $end
$var reg 64 #- OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[30] $end
$var parameter 6 $- i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 %- IN [63:0] $end
$var wire 1 &- LOAD $end
$var parameter 32 '- SIZE $end
$var reg 64 (- OUT [63:0] $end
$upscope $end
$upscope $end
$scope begin registers[31] $end
$var parameter 6 )- i $end
$scope module xN $end
$var wire 1 ! CLK $end
$var wire 64 *- IN [63:0] $end
$var wire 1 +- LOAD $end
$var parameter 32 ,- SIZE $end
$var reg 64 -- OUT [63:0] $end
$upscope $end
$upscope $end
$scope module LOAD_DECODER $end
$var wire 5 .- IN [4:0] $end
$var wire 32 /- OUT [31:0] $end
$var wire 4 0- EN1 [3:0] $end
$var wire 1 . EN $end
$scope module DEC2_4 $end
$var wire 2 1- IN [1:0] $end
$var wire 4 2- OUT [3:0] $end
$var wire 1 . EN $end
$upscope $end
$scope module DEC3_8__1 $end
$var wire 1 3- EN $end
$var wire 3 4- IN [2:0] $end
$var wire 8 5- OUT [7:0] $end
$upscope $end
$scope module DEC3_8__2 $end
$var wire 1 6- EN $end
$var wire 3 7- IN [2:0] $end
$var wire 8 8- OUT [7:0] $end
$upscope $end
$scope module DEC3_8__3 $end
$var wire 1 9- EN $end
$var wire 3 :- IN [2:0] $end
$var wire 8 ;- OUT [7:0] $end
$upscope $end
$scope module DEC3_8__4 $end
$var wire 1 <- EN $end
$var wire 3 =- IN [2:0] $end
$var wire 8 >- OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ULA $end
$var wire 1 L GT_SN $end
$var wire 1 K GT_UN $end
$var wire 1 I LT_UN $end
$var wire 3 ?- funct3 [2:0] $end
$var wire 7 @- funct7 [6:0] $end
$var wire 7 A- opcode [6:0] $end
$var wire 64 B- s1 [63:0] $end
$var wire 64 C- s2 [63:0] $end
$var wire 1 D- sub $end
$var wire 64 E- res [63:0] $end
$var wire 1 F- cout $end
$var wire 1 J LT_SN $end
$var wire 1 M EQ $end
$var parameter 32 G- SIZE $end
$scope module adder $end
$var wire 1 D- Cin $end
$var wire 64 H- X [63:0] $end
$var wire 64 I- Y [63:0] $end
$var wire 65 J- cins [64:0] $end
$var wire 64 K- S [63:0] $end
$var wire 1 F- Cout $end
$var parameter 32 L- SIZE $end
$scope begin adders[0] $end
$var parameter 2 M- i $end
$scope module SOMA $end
$var wire 1 N- Cin $end
$var wire 1 O- Cout $end
$var wire 1 P- S $end
$var wire 1 Q- X $end
$var wire 1 R- Y $end
$var wire 1 S- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[1] $end
$var parameter 2 T- i $end
$scope module SOMA $end
$var wire 1 U- Cin $end
$var wire 1 V- Cout $end
$var wire 1 W- S $end
$var wire 1 X- X $end
$var wire 1 Y- Y $end
$var wire 1 Z- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[2] $end
$var parameter 3 [- i $end
$scope module SOMA $end
$var wire 1 \- Cin $end
$var wire 1 ]- Cout $end
$var wire 1 ^- S $end
$var wire 1 _- X $end
$var wire 1 `- Y $end
$var wire 1 a- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[3] $end
$var parameter 3 b- i $end
$scope module SOMA $end
$var wire 1 c- Cin $end
$var wire 1 d- Cout $end
$var wire 1 e- S $end
$var wire 1 f- X $end
$var wire 1 g- Y $end
$var wire 1 h- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[4] $end
$var parameter 4 i- i $end
$scope module SOMA $end
$var wire 1 j- Cin $end
$var wire 1 k- Cout $end
$var wire 1 l- S $end
$var wire 1 m- X $end
$var wire 1 n- Y $end
$var wire 1 o- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[5] $end
$var parameter 4 p- i $end
$scope module SOMA $end
$var wire 1 q- Cin $end
$var wire 1 r- Cout $end
$var wire 1 s- S $end
$var wire 1 t- X $end
$var wire 1 u- Y $end
$var wire 1 v- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[6] $end
$var parameter 4 w- i $end
$scope module SOMA $end
$var wire 1 x- Cin $end
$var wire 1 y- Cout $end
$var wire 1 z- S $end
$var wire 1 {- X $end
$var wire 1 |- Y $end
$var wire 1 }- xor1 $end
$upscope $end
$upscope $end
$scope begin adders[7] $end
$var parameter 4 ~- i $end
$scope module SOMA $end
$var wire 1 !. Cin $end
$var wire 1 ". Cout $end
$var wire 1 #. S $end
$var wire 1 $. X $end
$var wire 1 %. Y $end
$var wire 1 &. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[8] $end
$var parameter 5 '. i $end
$scope module SOMA $end
$var wire 1 (. Cin $end
$var wire 1 ). Cout $end
$var wire 1 *. S $end
$var wire 1 +. X $end
$var wire 1 ,. Y $end
$var wire 1 -. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[9] $end
$var parameter 5 .. i $end
$scope module SOMA $end
$var wire 1 /. Cin $end
$var wire 1 0. Cout $end
$var wire 1 1. S $end
$var wire 1 2. X $end
$var wire 1 3. Y $end
$var wire 1 4. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[10] $end
$var parameter 5 5. i $end
$scope module SOMA $end
$var wire 1 6. Cin $end
$var wire 1 7. Cout $end
$var wire 1 8. S $end
$var wire 1 9. X $end
$var wire 1 :. Y $end
$var wire 1 ;. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[11] $end
$var parameter 5 <. i $end
$scope module SOMA $end
$var wire 1 =. Cin $end
$var wire 1 >. Cout $end
$var wire 1 ?. S $end
$var wire 1 @. X $end
$var wire 1 A. Y $end
$var wire 1 B. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[12] $end
$var parameter 5 C. i $end
$scope module SOMA $end
$var wire 1 D. Cin $end
$var wire 1 E. Cout $end
$var wire 1 F. S $end
$var wire 1 G. X $end
$var wire 1 H. Y $end
$var wire 1 I. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[13] $end
$var parameter 5 J. i $end
$scope module SOMA $end
$var wire 1 K. Cin $end
$var wire 1 L. Cout $end
$var wire 1 M. S $end
$var wire 1 N. X $end
$var wire 1 O. Y $end
$var wire 1 P. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[14] $end
$var parameter 5 Q. i $end
$scope module SOMA $end
$var wire 1 R. Cin $end
$var wire 1 S. Cout $end
$var wire 1 T. S $end
$var wire 1 U. X $end
$var wire 1 V. Y $end
$var wire 1 W. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[15] $end
$var parameter 5 X. i $end
$scope module SOMA $end
$var wire 1 Y. Cin $end
$var wire 1 Z. Cout $end
$var wire 1 [. S $end
$var wire 1 \. X $end
$var wire 1 ]. Y $end
$var wire 1 ^. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[16] $end
$var parameter 6 _. i $end
$scope module SOMA $end
$var wire 1 `. Cin $end
$var wire 1 a. Cout $end
$var wire 1 b. S $end
$var wire 1 c. X $end
$var wire 1 d. Y $end
$var wire 1 e. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[17] $end
$var parameter 6 f. i $end
$scope module SOMA $end
$var wire 1 g. Cin $end
$var wire 1 h. Cout $end
$var wire 1 i. S $end
$var wire 1 j. X $end
$var wire 1 k. Y $end
$var wire 1 l. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[18] $end
$var parameter 6 m. i $end
$scope module SOMA $end
$var wire 1 n. Cin $end
$var wire 1 o. Cout $end
$var wire 1 p. S $end
$var wire 1 q. X $end
$var wire 1 r. Y $end
$var wire 1 s. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[19] $end
$var parameter 6 t. i $end
$scope module SOMA $end
$var wire 1 u. Cin $end
$var wire 1 v. Cout $end
$var wire 1 w. S $end
$var wire 1 x. X $end
$var wire 1 y. Y $end
$var wire 1 z. xor1 $end
$upscope $end
$upscope $end
$scope begin adders[20] $end
$var parameter 6 {. i $end
$scope module SOMA $end
$var wire 1 |. Cin $end
$var wire 1 }. Cout $end
$var wire 1 ~. S $end
$var wire 1 !/ X $end
$var wire 1 "/ Y $end
$var wire 1 #/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[21] $end
$var parameter 6 $/ i $end
$scope module SOMA $end
$var wire 1 %/ Cin $end
$var wire 1 &/ Cout $end
$var wire 1 '/ S $end
$var wire 1 (/ X $end
$var wire 1 )/ Y $end
$var wire 1 */ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[22] $end
$var parameter 6 +/ i $end
$scope module SOMA $end
$var wire 1 ,/ Cin $end
$var wire 1 -/ Cout $end
$var wire 1 ./ S $end
$var wire 1 // X $end
$var wire 1 0/ Y $end
$var wire 1 1/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[23] $end
$var parameter 6 2/ i $end
$scope module SOMA $end
$var wire 1 3/ Cin $end
$var wire 1 4/ Cout $end
$var wire 1 5/ S $end
$var wire 1 6/ X $end
$var wire 1 7/ Y $end
$var wire 1 8/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[24] $end
$var parameter 6 9/ i $end
$scope module SOMA $end
$var wire 1 :/ Cin $end
$var wire 1 ;/ Cout $end
$var wire 1 </ S $end
$var wire 1 =/ X $end
$var wire 1 >/ Y $end
$var wire 1 ?/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[25] $end
$var parameter 6 @/ i $end
$scope module SOMA $end
$var wire 1 A/ Cin $end
$var wire 1 B/ Cout $end
$var wire 1 C/ S $end
$var wire 1 D/ X $end
$var wire 1 E/ Y $end
$var wire 1 F/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[26] $end
$var parameter 6 G/ i $end
$scope module SOMA $end
$var wire 1 H/ Cin $end
$var wire 1 I/ Cout $end
$var wire 1 J/ S $end
$var wire 1 K/ X $end
$var wire 1 L/ Y $end
$var wire 1 M/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[27] $end
$var parameter 6 N/ i $end
$scope module SOMA $end
$var wire 1 O/ Cin $end
$var wire 1 P/ Cout $end
$var wire 1 Q/ S $end
$var wire 1 R/ X $end
$var wire 1 S/ Y $end
$var wire 1 T/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[28] $end
$var parameter 6 U/ i $end
$scope module SOMA $end
$var wire 1 V/ Cin $end
$var wire 1 W/ Cout $end
$var wire 1 X/ S $end
$var wire 1 Y/ X $end
$var wire 1 Z/ Y $end
$var wire 1 [/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[29] $end
$var parameter 6 \/ i $end
$scope module SOMA $end
$var wire 1 ]/ Cin $end
$var wire 1 ^/ Cout $end
$var wire 1 _/ S $end
$var wire 1 `/ X $end
$var wire 1 a/ Y $end
$var wire 1 b/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[30] $end
$var parameter 6 c/ i $end
$scope module SOMA $end
$var wire 1 d/ Cin $end
$var wire 1 e/ Cout $end
$var wire 1 f/ S $end
$var wire 1 g/ X $end
$var wire 1 h/ Y $end
$var wire 1 i/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[31] $end
$var parameter 6 j/ i $end
$scope module SOMA $end
$var wire 1 k/ Cin $end
$var wire 1 l/ Cout $end
$var wire 1 m/ S $end
$var wire 1 n/ X $end
$var wire 1 o/ Y $end
$var wire 1 p/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[32] $end
$var parameter 7 q/ i $end
$scope module SOMA $end
$var wire 1 r/ Cin $end
$var wire 1 s/ Cout $end
$var wire 1 t/ S $end
$var wire 1 u/ X $end
$var wire 1 v/ Y $end
$var wire 1 w/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[33] $end
$var parameter 7 x/ i $end
$scope module SOMA $end
$var wire 1 y/ Cin $end
$var wire 1 z/ Cout $end
$var wire 1 {/ S $end
$var wire 1 |/ X $end
$var wire 1 }/ Y $end
$var wire 1 ~/ xor1 $end
$upscope $end
$upscope $end
$scope begin adders[34] $end
$var parameter 7 !0 i $end
$scope module SOMA $end
$var wire 1 "0 Cin $end
$var wire 1 #0 Cout $end
$var wire 1 $0 S $end
$var wire 1 %0 X $end
$var wire 1 &0 Y $end
$var wire 1 '0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[35] $end
$var parameter 7 (0 i $end
$scope module SOMA $end
$var wire 1 )0 Cin $end
$var wire 1 *0 Cout $end
$var wire 1 +0 S $end
$var wire 1 ,0 X $end
$var wire 1 -0 Y $end
$var wire 1 .0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[36] $end
$var parameter 7 /0 i $end
$scope module SOMA $end
$var wire 1 00 Cin $end
$var wire 1 10 Cout $end
$var wire 1 20 S $end
$var wire 1 30 X $end
$var wire 1 40 Y $end
$var wire 1 50 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[37] $end
$var parameter 7 60 i $end
$scope module SOMA $end
$var wire 1 70 Cin $end
$var wire 1 80 Cout $end
$var wire 1 90 S $end
$var wire 1 :0 X $end
$var wire 1 ;0 Y $end
$var wire 1 <0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[38] $end
$var parameter 7 =0 i $end
$scope module SOMA $end
$var wire 1 >0 Cin $end
$var wire 1 ?0 Cout $end
$var wire 1 @0 S $end
$var wire 1 A0 X $end
$var wire 1 B0 Y $end
$var wire 1 C0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[39] $end
$var parameter 7 D0 i $end
$scope module SOMA $end
$var wire 1 E0 Cin $end
$var wire 1 F0 Cout $end
$var wire 1 G0 S $end
$var wire 1 H0 X $end
$var wire 1 I0 Y $end
$var wire 1 J0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[40] $end
$var parameter 7 K0 i $end
$scope module SOMA $end
$var wire 1 L0 Cin $end
$var wire 1 M0 Cout $end
$var wire 1 N0 S $end
$var wire 1 O0 X $end
$var wire 1 P0 Y $end
$var wire 1 Q0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[41] $end
$var parameter 7 R0 i $end
$scope module SOMA $end
$var wire 1 S0 Cin $end
$var wire 1 T0 Cout $end
$var wire 1 U0 S $end
$var wire 1 V0 X $end
$var wire 1 W0 Y $end
$var wire 1 X0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[42] $end
$var parameter 7 Y0 i $end
$scope module SOMA $end
$var wire 1 Z0 Cin $end
$var wire 1 [0 Cout $end
$var wire 1 \0 S $end
$var wire 1 ]0 X $end
$var wire 1 ^0 Y $end
$var wire 1 _0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[43] $end
$var parameter 7 `0 i $end
$scope module SOMA $end
$var wire 1 a0 Cin $end
$var wire 1 b0 Cout $end
$var wire 1 c0 S $end
$var wire 1 d0 X $end
$var wire 1 e0 Y $end
$var wire 1 f0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[44] $end
$var parameter 7 g0 i $end
$scope module SOMA $end
$var wire 1 h0 Cin $end
$var wire 1 i0 Cout $end
$var wire 1 j0 S $end
$var wire 1 k0 X $end
$var wire 1 l0 Y $end
$var wire 1 m0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[45] $end
$var parameter 7 n0 i $end
$scope module SOMA $end
$var wire 1 o0 Cin $end
$var wire 1 p0 Cout $end
$var wire 1 q0 S $end
$var wire 1 r0 X $end
$var wire 1 s0 Y $end
$var wire 1 t0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[46] $end
$var parameter 7 u0 i $end
$scope module SOMA $end
$var wire 1 v0 Cin $end
$var wire 1 w0 Cout $end
$var wire 1 x0 S $end
$var wire 1 y0 X $end
$var wire 1 z0 Y $end
$var wire 1 {0 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[47] $end
$var parameter 7 |0 i $end
$scope module SOMA $end
$var wire 1 }0 Cin $end
$var wire 1 ~0 Cout $end
$var wire 1 !1 S $end
$var wire 1 "1 X $end
$var wire 1 #1 Y $end
$var wire 1 $1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[48] $end
$var parameter 7 %1 i $end
$scope module SOMA $end
$var wire 1 &1 Cin $end
$var wire 1 '1 Cout $end
$var wire 1 (1 S $end
$var wire 1 )1 X $end
$var wire 1 *1 Y $end
$var wire 1 +1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[49] $end
$var parameter 7 ,1 i $end
$scope module SOMA $end
$var wire 1 -1 Cin $end
$var wire 1 .1 Cout $end
$var wire 1 /1 S $end
$var wire 1 01 X $end
$var wire 1 11 Y $end
$var wire 1 21 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[50] $end
$var parameter 7 31 i $end
$scope module SOMA $end
$var wire 1 41 Cin $end
$var wire 1 51 Cout $end
$var wire 1 61 S $end
$var wire 1 71 X $end
$var wire 1 81 Y $end
$var wire 1 91 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[51] $end
$var parameter 7 :1 i $end
$scope module SOMA $end
$var wire 1 ;1 Cin $end
$var wire 1 <1 Cout $end
$var wire 1 =1 S $end
$var wire 1 >1 X $end
$var wire 1 ?1 Y $end
$var wire 1 @1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[52] $end
$var parameter 7 A1 i $end
$scope module SOMA $end
$var wire 1 B1 Cin $end
$var wire 1 C1 Cout $end
$var wire 1 D1 S $end
$var wire 1 E1 X $end
$var wire 1 F1 Y $end
$var wire 1 G1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[53] $end
$var parameter 7 H1 i $end
$scope module SOMA $end
$var wire 1 I1 Cin $end
$var wire 1 J1 Cout $end
$var wire 1 K1 S $end
$var wire 1 L1 X $end
$var wire 1 M1 Y $end
$var wire 1 N1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[54] $end
$var parameter 7 O1 i $end
$scope module SOMA $end
$var wire 1 P1 Cin $end
$var wire 1 Q1 Cout $end
$var wire 1 R1 S $end
$var wire 1 S1 X $end
$var wire 1 T1 Y $end
$var wire 1 U1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[55] $end
$var parameter 7 V1 i $end
$scope module SOMA $end
$var wire 1 W1 Cin $end
$var wire 1 X1 Cout $end
$var wire 1 Y1 S $end
$var wire 1 Z1 X $end
$var wire 1 [1 Y $end
$var wire 1 \1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[56] $end
$var parameter 7 ]1 i $end
$scope module SOMA $end
$var wire 1 ^1 Cin $end
$var wire 1 _1 Cout $end
$var wire 1 `1 S $end
$var wire 1 a1 X $end
$var wire 1 b1 Y $end
$var wire 1 c1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[57] $end
$var parameter 7 d1 i $end
$scope module SOMA $end
$var wire 1 e1 Cin $end
$var wire 1 f1 Cout $end
$var wire 1 g1 S $end
$var wire 1 h1 X $end
$var wire 1 i1 Y $end
$var wire 1 j1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[58] $end
$var parameter 7 k1 i $end
$scope module SOMA $end
$var wire 1 l1 Cin $end
$var wire 1 m1 Cout $end
$var wire 1 n1 S $end
$var wire 1 o1 X $end
$var wire 1 p1 Y $end
$var wire 1 q1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[59] $end
$var parameter 7 r1 i $end
$scope module SOMA $end
$var wire 1 s1 Cin $end
$var wire 1 t1 Cout $end
$var wire 1 u1 S $end
$var wire 1 v1 X $end
$var wire 1 w1 Y $end
$var wire 1 x1 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[60] $end
$var parameter 7 y1 i $end
$scope module SOMA $end
$var wire 1 z1 Cin $end
$var wire 1 {1 Cout $end
$var wire 1 |1 S $end
$var wire 1 }1 X $end
$var wire 1 ~1 Y $end
$var wire 1 !2 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[61] $end
$var parameter 7 "2 i $end
$scope module SOMA $end
$var wire 1 #2 Cin $end
$var wire 1 $2 Cout $end
$var wire 1 %2 S $end
$var wire 1 &2 X $end
$var wire 1 '2 Y $end
$var wire 1 (2 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[62] $end
$var parameter 7 )2 i $end
$scope module SOMA $end
$var wire 1 *2 Cin $end
$var wire 1 +2 Cout $end
$var wire 1 ,2 S $end
$var wire 1 -2 X $end
$var wire 1 .2 Y $end
$var wire 1 /2 xor1 $end
$upscope $end
$upscope $end
$scope begin adders[63] $end
$var parameter 7 02 i $end
$scope module SOMA $end
$var wire 1 12 Cin $end
$var wire 1 22 Cout $end
$var wire 1 32 S $end
$var wire 1 42 X $end
$var wire 1 52 Y $end
$var wire 1 62 xor1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module IM $end
$var wire 64 72 ADDR [63:0] $end
$var wire 32 82 OUTPUT [31:0] $end
$upscope $end
$scope module UC $end
$var wire 1 ! clk $end
$var wire 7 92 opcode [6:0] $end
$var wire 1 " reset $end
$var parameter 3 :2 DECODE $end
$var parameter 3 ;2 EXECUTE_ADDI $end
$var parameter 3 <2 EXECUTE_ADDSUB $end
$var parameter 3 =2 FETCH $end
$var parameter 3 >2 WRITE_BACK $end
$var reg 2 ?2 RF_din_sel [1:0] $end
$var reg 1 0 ULA_din2_sel $end
$var reg 1 / WE_MEM $end
$var reg 1 . WE_RF $end
$var reg 1 - addr_sel $end
$var reg 3 @2 current_state [2:0] $end
$var reg 1 ) load_ir $end
$var reg 1 ( load_pc $end
$var reg 3 A2 next_state [2:0] $end
$var reg 1 $ pc_adder_sel $end
$var reg 1 # pc_next_sel $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 >2
b0 =2
b10 <2
b11 ;2
b1 :2
b111111 02
b111110 )2
b111101 "2
b111100 y1
b111011 r1
b111010 k1
b111001 d1
b111000 ]1
b110111 V1
b110110 O1
b110101 H1
b110100 A1
b110011 :1
b110010 31
b110001 ,1
b110000 %1
b101111 |0
b101110 u0
b101101 n0
b101100 g0
b101011 `0
b101010 Y0
b101001 R0
b101000 K0
b100111 D0
b100110 =0
b100101 60
b100100 /0
b100011 (0
b100010 !0
b100001 x/
b100000 q/
b11111 j/
b11110 c/
b11101 \/
b11100 U/
b11011 N/
b11010 G/
b11001 @/
b11000 9/
b10111 2/
b10110 +/
b10101 $/
b10100 {.
b10011 t.
b10010 m.
b10001 f.
b10000 _.
b1111 X.
b1110 Q.
b1101 J.
b1100 C.
b1011 <.
b1010 5.
b1001 ..
b1000 '.
b111 ~-
b110 w-
b101 p-
b100 i-
b11 b-
b10 [-
b1 T-
b0 M-
b1000000 L-
b1000000 G-
b1000000 ,-
b11111 )-
b1000000 '-
b11110 $-
b1000000 "-
b11101 },
b1000000 {,
b11100 x,
b1000000 v,
b11011 s,
b1000000 q,
b11010 n,
b1000000 l,
b11001 i,
b1000000 g,
b11000 d,
b1000000 b,
b10111 _,
b1000000 ],
b10110 Z,
b1000000 X,
b10101 U,
b1000000 S,
b10100 P,
b1000000 N,
b10011 K,
b1000000 I,
b10010 F,
b1000000 D,
b10001 A,
b1000000 ?,
b10000 <,
b1000000 :,
b1111 7,
b1000000 5,
b1110 2,
b1000000 0,
b1101 -,
b1000000 +,
b1100 (,
b1000000 &,
b1011 #,
b1000000 !,
b1010 |+
b1000000 z+
b1001 w+
b1000000 u+
b1000 r+
b1000000 p+
b111 m+
b1000000 k+
b110 h+
b1000000 f+
b101 c+
b1000000 a+
b100 ^+
b1000000 \+
b11 Y+
b1000000 W+
b10 T+
b1000000 R+
b1 O+
b1000000 N+
b111111 @+
b111110 9+
b111101 2+
b111100 ++
b111011 $+
b111010 {*
b111001 t*
b111000 m*
b110111 f*
b110110 _*
b110101 X*
b110100 Q*
b110011 J*
b110010 C*
b110001 <*
b110000 5*
b101111 .*
b101110 '*
b101101 ~)
b101100 w)
b101011 p)
b101010 i)
b101001 b)
b101000 [)
b100111 T)
b100110 M)
b100101 F)
b100100 ?)
b100011 8)
b100010 1)
b100001 *)
b100000 #)
b11111 z(
b11110 s(
b11101 l(
b11100 e(
b11011 ^(
b11010 W(
b11001 P(
b11000 I(
b10111 B(
b10110 ;(
b10101 4(
b10100 -(
b10011 &(
b10010 }'
b10001 v'
b10000 o'
b1111 h'
b1110 a'
b1101 Z'
b1100 S'
b1011 L'
b1010 E'
b1001 >'
b1000 7'
b111 0'
b110 )'
b101 "'
b100 y&
b11 r&
b10 k&
b1 d&
b0 ]&
b1000000 \&
b111111 O&
b111110 H&
b111101 A&
b111100 :&
b111011 3&
b111010 ,&
b111001 %&
b111000 |%
b110111 u%
b110110 n%
b110101 g%
b110100 `%
b110011 Y%
b110010 R%
b110001 K%
b110000 D%
b101111 =%
b101110 6%
b101101 /%
b101100 (%
b101011 !%
b101010 x$
b101001 q$
b101000 j$
b100111 c$
b100110 \$
b100101 U$
b100100 N$
b100011 G$
b100010 @$
b100001 9$
b100000 2$
b11111 +$
b11110 $$
b11101 {#
b11100 t#
b11011 m#
b11010 f#
b11001 _#
b11000 X#
b10111 Q#
b10110 J#
b10101 C#
b10100 <#
b10011 5#
b10010 .#
b10001 '#
b10000 ~"
b1111 w"
b1110 p"
b1101 i"
b1100 b"
b1011 ["
b1010 T"
b1001 M"
b1000 F"
b111 ?"
b110 8"
b101 1"
b100 *"
b11 #"
b10 z
b1 s
b0 l
b1000000 k
b1000000 c
b100000 T
b1100 P
b1000000 6
b1000000000000 5
$end
#0
$dumpvars
b1 A2
b0 @2
b0 ?2
b0 92
b101000000000000010010011 82
b0 72
062
052
042
032
022
012
0/2
0.2
0-2
0,2
0+2
0*2
0(2
0'2
0&2
0%2
0$2
0#2
0!2
0~1
0}1
0|1
0{1
0z1
0x1
0w1
0v1
0u1
0t1
0s1
0q1
0p1
0o1
0n1
0m1
0l1
0j1
0i1
0h1
0g1
0f1
0e1
0c1
0b1
0a1
0`1
0_1
0^1
0\1
0[1
0Z1
0Y1
0X1
0W1
0U1
0T1
0S1
0R1
0Q1
0P1
0N1
0M1
0L1
0K1
0J1
0I1
0G1
0F1
0E1
0D1
0C1
0B1
0@1
0?1
0>1
0=1
0<1
0;1
091
081
071
061
051
041
021
011
001
0/1
0.1
0-1
0+1
0*1
0)1
0(1
0'1
0&1
0$1
0#1
0"1
0!1
0~0
0}0
0{0
0z0
0y0
0x0
0w0
0v0
0t0
0s0
0r0
0q0
0p0
0o0
0m0
0l0
0k0
0j0
0i0
0h0
0f0
0e0
0d0
0c0
0b0
0a0
0_0
0^0
0]0
0\0
0[0
0Z0
0X0
0W0
0V0
0U0
0T0
0S0
0Q0
0P0
0O0
0N0
0M0
0L0
0J0
0I0
0H0
0G0
0F0
0E0
0C0
0B0
0A0
0@0
0?0
0>0
0<0
0;0
0:0
090
080
070
050
040
030
020
010
000
0.0
0-0
0,0
0+0
0*0
0)0
0'0
0&0
0%0
0$0
0#0
0"0
0~/
0}/
0|/
0{/
0z/
0y/
0w/
0v/
0u/
0t/
0s/
0r/
0p/
0o/
0n/
0m/
0l/
0k/
0i/
0h/
0g/
0f/
0e/
0d/
0b/
0a/
0`/
0_/
0^/
0]/
0[/
0Z/
0Y/
0X/
0W/
0V/
0T/
0S/
0R/
0Q/
0P/
0O/
0M/
0L/
0K/
0J/
0I/
0H/
0F/
0E/
0D/
0C/
0B/
0A/
0?/
0>/
0=/
0</
0;/
0:/
08/
07/
06/
05/
04/
03/
01/
00/
0//
0./
0-/
0,/
0*/
0)/
0(/
0'/
0&/
0%/
0#/
0"/
0!/
0~.
0}.
0|.
0z.
0y.
0x.
0w.
0v.
0u.
0s.
0r.
0q.
0p.
0o.
0n.
0l.
0k.
0j.
0i.
0h.
0g.
0e.
0d.
0c.
0b.
0a.
0`.
0^.
0].
0\.
0[.
0Z.
0Y.
0W.
0V.
0U.
0T.
0S.
0R.
0P.
0O.
0N.
0M.
0L.
0K.
0I.
0H.
0G.
0F.
0E.
0D.
0B.
0A.
0@.
0?.
0>.
0=.
0;.
0:.
09.
08.
07.
06.
04.
03.
02.
01.
00.
0/.
0-.
0,.
0+.
0*.
0).
0(.
0&.
0%.
0$.
0#.
0".
0!.
0}-
0|-
0{-
0z-
0y-
0x-
0v-
0u-
0t-
0s-
0r-
0q-
0o-
0n-
0m-
0l-
0k-
0j-
0h-
0g-
0f-
0e-
0d-
0c-
0a-
0`-
0_-
0^-
0]-
0\-
0Z-
0Y-
0X-
0W-
0V-
0U-
0S-
0R-
0Q-
0P-
0O-
0N-
b0 K-
b0 J-
b0 I-
b0 H-
0F-
b0 E-
0D-
b0 C-
b0 B-
b0 A-
b0 @-
b0 ?-
b0 >-
b0 =-
0<-
b0 ;-
b0 :-
09-
b0 8-
b0 7-
06-
b0 5-
b0 4-
03-
b0 2-
b0 1-
b0 0-
b0 /-
b0 .-
bx --
0+-
bz *-
bx (-
0&-
bz %-
bx #-
0!-
bz ~,
bx |,
0z,
bz y,
bx w,
0u,
bz t,
bx r,
0p,
bz o,
bx m,
0k,
bz j,
bx h,
0f,
bz e,
bx c,
0a,
bz `,
bx ^,
0\,
bz [,
bx Y,
0W,
bz V,
bx T,
0R,
bz Q,
bx O,
0M,
bz L,
bx J,
0H,
bz G,
bx E,
0C,
bz B,
bx @,
0>,
bz =,
bx ;,
09,
bz 8,
bx 6,
04,
bz 3,
bx 1,
0/,
bz .,
bx ,,
0*,
bz ),
bx ',
0%,
bz $,
bx ",
0~+
bz }+
bx {+
0y+
bz x+
bx v+
0t+
bz s+
bx q+
0o+
bz n+
bx l+
0j+
bz i+
bx g+
0e+
bz d+
bx b+
0`+
bz _+
bx ]+
0[+
bz Z+
bx X+
0V+
bz U+
bx S+
0Q+
bz P+
b0 M+
b0 L+
b0 K+
b0 J+
bz I+
b0 H+
b0 G+
0F+
0E+
0D+
0C+
0B+
0A+
0?+
0>+
0=+
0<+
0;+
0:+
08+
07+
06+
05+
04+
03+
01+
00+
0/+
0.+
0-+
0,+
0*+
0)+
0(+
0'+
0&+
0%+
0#+
0"+
0!+
0~*
0}*
0|*
0z*
0y*
0x*
0w*
0v*
0u*
0s*
0r*
0q*
0p*
0o*
0n*
0l*
0k*
0j*
0i*
0h*
0g*
0e*
0d*
0c*
0b*
0a*
0`*
0^*
0]*
0\*
0[*
0Z*
0Y*
0W*
0V*
0U*
0T*
0S*
0R*
0P*
0O*
0N*
0M*
0L*
0K*
0I*
0H*
0G*
0F*
0E*
0D*
0B*
0A*
0@*
0?*
0>*
0=*
0;*
0:*
09*
08*
07*
06*
04*
03*
02*
01*
00*
0/*
0-*
0,*
0+*
0**
0)*
0(*
0&*
0%*
0$*
0#*
0"*
0!*
0})
0|)
0{)
0z)
0y)
0x)
0v)
0u)
0t)
0s)
0r)
0q)
0o)
0n)
0m)
0l)
0k)
0j)
0h)
0g)
0f)
0e)
0d)
0c)
0a)
0`)
0_)
0^)
0])
0\)
0Z)
0Y)
0X)
0W)
0V)
0U)
0S)
0R)
0Q)
0P)
0O)
0N)
0L)
0K)
0J)
0I)
0H)
0G)
0E)
0D)
0C)
0B)
0A)
0@)
0>)
0=)
0<)
0;)
0:)
09)
07)
06)
05)
04)
03)
02)
00)
0/)
0.)
0-)
0,)
0+)
0))
0()
0')
0&)
0%)
0$)
0")
0!)
0~(
0}(
0|(
0{(
0y(
0x(
0w(
0v(
0u(
0t(
0r(
0q(
0p(
0o(
0n(
0m(
0k(
0j(
0i(
0h(
0g(
0f(
0d(
0c(
0b(
0a(
0`(
0_(
0](
0\(
0[(
0Z(
0Y(
0X(
0V(
0U(
0T(
0S(
0R(
0Q(
0O(
0N(
0M(
0L(
0K(
0J(
0H(
0G(
0F(
0E(
0D(
0C(
0A(
0@(
0?(
0>(
0=(
0<(
0:(
09(
08(
07(
06(
05(
03(
02(
01(
00(
0/(
0.(
0,(
0+(
0*(
0)(
0((
0'(
0%(
0$(
0#(
0"(
0!(
0~'
0|'
0{'
0z'
0y'
0x'
0w'
0u'
0t'
0s'
0r'
0q'
0p'
0n'
0m'
0l'
0k'
0j'
0i'
0g'
0f'
0e'
0d'
0c'
0b'
0`'
0_'
0^'
0]'
0\'
0['
0Y'
0X'
0W'
0V'
0U'
0T'
0R'
0Q'
0P'
0O'
0N'
0M'
0K'
0J'
0I'
0H'
0G'
0F'
0D'
0C'
0B'
0A'
0@'
0?'
0='
0<'
0;'
0:'
09'
08'
06'
05'
04'
03'
02'
01'
0/'
0.'
0-'
0,'
0+'
0*'
0('
0''
0&'
0%'
0$'
0#'
0!'
0~&
0}&
0|&
0{&
0z&
0x&
0w&
0v&
0u&
0t&
0s&
0q&
0p&
0o&
0n&
0m&
0l&
0j&
0i&
0h&
0g&
0f&
0e&
0c&
0b&
0a&
0`&
0_&
0^&
0[&
b0 Z&
b0 Y&
b0 X&
b0 W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0N&
0M&
0L&
0K&
0J&
0I&
0G&
0F&
0E&
0D&
0C&
0B&
0@&
0?&
0>&
0=&
0<&
0;&
09&
08&
07&
06&
05&
04&
02&
01&
00&
0/&
0.&
0-&
0+&
0*&
0)&
0(&
0'&
0&&
0$&
0#&
0"&
0!&
0~%
0}%
0{%
0z%
0y%
0x%
0w%
0v%
0t%
0s%
0r%
0q%
0p%
0o%
0m%
0l%
0k%
0j%
0i%
0h%
0f%
0e%
0d%
0c%
0b%
0a%
0_%
0^%
0]%
0\%
0[%
0Z%
0X%
0W%
0V%
0U%
0T%
0S%
0Q%
0P%
0O%
0N%
0M%
0L%
0J%
0I%
0H%
0G%
0F%
0E%
0C%
0B%
0A%
0@%
0?%
0>%
0<%
0;%
0:%
09%
08%
07%
05%
04%
03%
02%
01%
00%
0.%
0-%
0,%
0+%
0*%
0)%
0'%
0&%
0%%
0$%
0#%
0"%
0~$
0}$
0|$
0{$
0z$
0y$
0w$
0v$
0u$
0t$
0s$
0r$
0p$
0o$
0n$
0m$
0l$
0k$
0i$
0h$
0g$
0f$
0e$
0d$
0b$
0a$
0`$
0_$
0^$
0]$
0[$
0Z$
0Y$
0X$
0W$
0V$
0T$
0S$
0R$
0Q$
0P$
0O$
0M$
0L$
0K$
0J$
0I$
0H$
0F$
0E$
0D$
0C$
0B$
0A$
0?$
0>$
0=$
0<$
0;$
0:$
08$
07$
06$
05$
04$
03$
01$
00$
0/$
0.$
0-$
0,$
0*$
0)$
0($
0'$
0&$
0%$
0#$
0"$
0!$
0~#
0}#
0|#
0z#
0y#
0x#
0w#
0v#
0u#
0s#
0r#
0q#
0p#
0o#
0n#
0l#
0k#
0j#
0i#
0h#
0g#
0e#
0d#
0c#
0b#
0a#
0`#
0^#
0]#
0\#
0[#
0Z#
0Y#
0W#
0V#
0U#
0T#
0S#
0R#
0P#
0O#
0N#
0M#
0L#
0K#
0I#
0H#
0G#
0F#
0E#
0D#
0B#
0A#
0@#
0?#
0>#
0=#
0;#
0:#
09#
08#
07#
06#
04#
03#
02#
01#
00#
0/#
0-#
0,#
0+#
0*#
0)#
0(#
0&#
0%#
0$#
0##
0"#
0!#
0}"
0|"
0{"
0z"
0y"
0x"
0v"
0u"
0t"
0s"
0r"
0q"
0o"
0n"
0m"
0l"
0k"
0j"
0h"
0g"
0f"
0e"
0d"
0c"
0a"
0`"
0_"
0^"
0]"
0\"
0Z"
0Y"
0X"
0W"
0V"
0U"
0S"
0R"
0Q"
0P"
0O"
0N"
0L"
0K"
0J"
0I"
0H"
0G"
0E"
0D"
0C"
0B"
0A"
0@"
0>"
0="
0<"
0;"
0:"
09"
07"
06"
05"
04"
03"
02"
00"
0/"
0."
0-"
0,"
0+"
0)"
0("
0'"
0&"
0%"
0$"
1""
1!"
0~
1}
0|
0{
0y
0x
0w
0v
0u
0t
0r
0q
0p
0o
0n
0m
0j
b100 i
b0 h
b100 g
b0 f
0e
b0 d
b100 b
1a
b0 `
x_
0^
b0 ]
b0 \
b100 [
b100 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b101000000000000010010011 S
b0 R
b0 Q
b0 O
b0 N
1M
0L
0K
0J
0I
bz H
b0 G
b0 F
b0 E
b100 D
b0 C
b0 B
b0 A
b0 @
b100 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b101000000000000010010011 8
bz 7
b0 4
bx 3
b0 2
b0 1
00
0/
0.
0-
b0 ,
bx +
b101000000000000010010011 *
0)
0(
b0 '
b101000000000000010010011 &
b0 %
x$
0#
1"
0!
$end
#5
1!
#10
0!
0"
#15
b10 A2
b1 @2
1!
#20
0!
#25
b0 H
b0 I+
b0 P+
b0 U+
b0 Z+
b0 _+
b0 d+
b0 i+
b0 n+
b0 s+
b0 x+
b0 }+
b0 $,
b0 ),
b0 .,
b0 3,
b0 8,
b0 =,
b0 B,
b0 G,
b0 L,
b0 Q,
b0 V,
b0 [,
b0 `,
b0 e,
b0 j,
b0 o,
b0 t,
b0 y,
b0 ~,
b0 %-
b0 *-
b100 A2
b1 1
b1 G
b1 ?2
b10 @2
1!
#30
0!
#35
b1 M+
b1 /-
b1 >-
1<-
b1 0-
b1 2-
b0 A2
b100 @2
1.
1!
#40
0!
#45
b0 M+
b0 /-
b0 >-
0<-
b0 0-
b0 2-
b1 A2
0.
1-
1(
1)
b0 @2
1!
#50
0!
#55
bx S
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 8
xJ
xI
xL
bx H
bx I+
bx P+
bx U+
bx Z+
bx _+
bx d+
bx i+
bx n+
bx s+
bx x+
bx }+
bx $,
bx ),
bx .,
bx 3,
bx 8,
bx =,
bx B,
bx G,
bx L,
bx Q,
bx V,
bx [,
bx `,
bx e,
bx j,
bx o,
bx t,
bx y,
bx ~,
bx %-
bx *-
bx *
bx 82
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
xa
bx '
bx B
xP-
xW-
x^-
xe-
xl-
xs-
xz-
x#.
x*.
x1.
x8.
x?.
xF.
xM.
xT.
x[.
xb.
xi.
xp.
xw.
x~.
x'/
x./
x5/
x</
xC/
xJ/
xQ/
xX/
x_/
xf/
xm/
xt/
x{/
x$0
x+0
x20
x90
x@0
xG0
xN0
xU0
x\0
xc0
xj0
xq0
xx0
x!1
x(1
x/1
x61
x=1
xD1
xK1
xR1
xY1
x`1
xg1
xn1
xu1
x|1
x%2
x,2
xM
bx :
bx E-
bx K-
x32
1&"
xS-
xZ-
xa-
xh-
xo-
xv-
x}-
x&.
x-.
x4.
x;.
xB.
xI.
xP.
xW.
x^.
xe.
xl.
xs.
xz.
x#/
x*/
x1/
x8/
x?/
xF/
xM/
xT/
x[/
xb/
xi/
xp/
xw/
x~/
x'0
x.0
x50
x<0
xC0
xJ0
xQ0
xX0
x_0
xf0
xm0
xt0
x{0
x$1
x+1
x21
x91
x@1
xG1
xN1
xU1
x\1
xc1
xj1
xq1
xx1
x!2
x(2
x/2
x62
b1000 D
b1000 [
b1000 b
1$"
xn&
xR-
xY-
x`-
xg-
xn-
xu-
x|-
x%.
x,.
x3.
x:.
xA.
xH.
xO.
xV.
x].
xd.
xk.
xr.
xy.
x"/
x)/
x0/
x7/
x>/
xE/
xL/
xS/
xZ/
xa/
xh/
xo/
xv/
x}/
x&0
x-0
x40
x;0
xB0
xI0
xP0
xW0
x^0
xe0
xl0
xs0
xz0
x#1
x*1
x11
x81
x?1
xF1
xM1
xT1
x[1
xb1
xi1
xp1
xw1
x~1
x'2
x.2
x52
1g&
b1x10 >
b1x10 Y
b1x10 Z&
1u&
b1000 ?
b1000 Z
b1000 i
0}
b1000 h
1|
xq&
bx I-
1j&
1x&
0""
xp&
b1 4-
b1 7-
b1 :-
b1 =-
bx F
bx C-
1h&
1v&
b11 A2
1~
b0x00 \
b0x00 X&
b1 =
b1 J+
b1 .-
bx ,
bx 4
bx 9
bx N
bx H+
b1010 ;
b1010 L+
b10011 %
b10011 A
b10011 X
b10011 A-
b10011 92
b1010 E
b1010 R
b1010 W
b1010 W&
b1 @2
0-
0(
0)
b100 @
b100 ]
b100 d
b100 f
b101000000000000010010011 C
b101000000000000010010011 Q
b101000000000000010010011 U
1!
#60
0!
#65
1L
b1000001000000110110011 S
b1000001000000110110011 &
b1000001000000110110011 8
1I
0J
b1010 H
b1010 I+
b1010 P+
b1010 U+
b1010 Z+
b1010 _+
b1010 d+
b1010 i+
b1010 n+
b1010 s+
b1010 x+
b1010 }+
b1010 $,
b1010 ),
b1010 .,
b1010 3,
b1010 8,
b1010 =,
b1010 B,
b1010 G,
b1010 L,
b1010 Q,
b1010 V,
b1010 [,
b1010 `,
b1010 e,
b1010 j,
b1010 o,
b1010 t,
b1010 y,
b1010 ~,
b1010 %-
b1010 *-
b1000001000000110110011 *
b1000001000000110110011 82
b10 72
b1010 2
0a
b1010 '
b1010 B
0P-
1W-
0^-
0M
1e-
0l-
0s-
0z-
0#.
0*.
01.
08.
0?.
0F.
0M.
0T.
0[.
0b.
0i.
0p.
0w.
0~.
0'/
0./
05/
0</
0C/
0J/
0Q/
0X/
0_/
0f/
0m/
0t/
0{/
0$0
0+0
020
090
0@0
0G0
0N0
0U0
0\0
0c0
0j0
0q0
0x0
0!1
0(1
0/1
061
0=1
0D1
0K1
0R1
0Y1
0`1
0g1
0n1
0u1
0|1
0%2
0,2
b1010 :
b1010 E-
b1010 K-
032
0S-
1Z-
0a-
1h-
0o-
0v-
0}-
0&.
0-.
04.
0;.
0B.
0I.
0P.
0W.
0^.
0e.
0l.
0s.
0z.
0#/
0*/
01/
08/
0?/
0F/
0M/
0T/
0[/
0b/
0i/
0p/
0w/
0~/
0'0
0.0
050
0<0
0C0
0J0
0Q0
0X0
0_0
0f0
0m0
0t0
0{0
0$1
0+1
021
091
0@1
0G1
0N1
0U1
0\1
0c1
0j1
0q1
0x1
0!2
0(2
0/2
062
0R-
1Y-
0`-
1g-
0n-
0u-
0|-
0%.
0,.
03.
0:.
0A.
0H.
0O.
0V.
0].
0d.
0k.
0r.
0y.
0"/
0)/
00/
07/
0>/
0E/
0L/
0S/
0Z/
0a/
0h/
0o/
0v/
0}/
0&0
0-0
040
0;0
0B0
0I0
0P0
0W0
0^0
0e0
0l0
0s0
0z0
0#1
0*1
011
081
0?1
0F1
0M1
0T1
0[1
0b1
0i1
0p1
0w1
0~1
0'2
0.2
052
b1010 I-
b1010 F
b1010 C-
b100 A2
10
b11 @2
1!
#70
0!
#75
1Q+
b10 M+
b10 /-
b10 >-
1<-
b1 0-
b1 2-
b0 A2
b100 @2
1.
1!
#80
0!
#85
0Q+
b0 M+
b0 /-
b0 >-
b111100000000000100010011 S
0<-
b111100000000000100010011 &
b111100000000000100010011 8
b0 0-
b0 2-
b111100000000000100010011 *
b111100000000000100010011 82
b1 72
b100 2
b100 '
b100 B
b1 A2
b1010 S+
0.
1-
1(
1)
b0 @2
1!
#90
0!
#95
b1111 H
b1111 I+
b1111 P+
b1111 U+
b1111 Z+
b1111 _+
b1111 d+
b1111 i+
b1111 n+
b1111 s+
b1111 x+
b1111 }+
b1111 $,
b1111 ),
b1111 .,
b1111 3,
b1111 8,
b1111 =,
b1111 B,
b1111 G,
b1111 L,
b1111 Q,
b1111 V,
b1111 [,
b1111 `,
b1111 e,
b1111 j,
b1111 o,
b1111 t,
b1111 y,
b1111 ~,
b1111 %-
b1111 *-
0-"
x|&
1P-
b1111 :
b1111 E-
b1111 K-
1^-
0+"
xz&
1S-
1a-
0$"
b1100 D
b1100 [
b1100 b
0%"
xu&
b0x0000 Y&
xt&
b1000000001000001000001000110011 S
1`&
b0xx111 >
b0xx111 Y
b0xx111 Z&
1n&
1R-
1`-
1}
b0 h
0|
b1100 ?
b1100 Z
b1100 i
1&"
xx&
b1000000001000001000001000110011 &
b1000000001000001000001000110011 8
1c&
1q&
b1111 I-
1""
1)"
0p&
xw&
b1000000001000001000001000110011 *
b1000000001000001000001000110011 82
b11 72
b1111 2
b10 4-
b10 7-
b10 :-
b10 =-
1a&
1o&
b1111 F
b1111 C-
b11 A2
0~
1'"
b0x000 \
b0x000 X&
b1111 '
b1111 B
b10 =
b10 J+
b10 .-
b1111 ;
b1111 L+
b1111 E
b1111 R
b1111 W
b1111 W&
b1 @2
0-
0(
0)
b1000 @
b1000 ]
b1000 d
b1000 f
b111100000000000100010011 C
b111100000000000100010011 Q
b111100000000000100010011 U
1!
#100
0!
#105
b100 A2
b11 @2
1!
#110
0!
#115
1V+
b100 M+
b100 /-
b100 >-
1<-
b1 0-
b1 2-
b0 A2
b100 @2
1.
1!
#120
0!
#125
0V+
b0 M+
b0 /-
b0 >-
b1000001000000110110011 S
0<-
b1000001000000110110011 &
b1000001000000110110011 8
b0 0-
b0 2-
b1000001000000110110011 *
b1000001000000110110011 82
b10 72
b1000 2
b1000 '
b1000 B
b1 A2
b1111 X+
0.
1-
1(
1)
b0 @2
1!
#130
0!
#135
1-"
xs&
1+"
xm&
1%"
b1100 H
b1100 I+
b1100 P+
b1100 U+
b1100 Z+
b1100 _+
b1100 d+
b1100 i+
b1100 n+
b1100 s+
b1100 x+
b1100 }+
b1100 $,
b1100 ),
b1100 .,
b1100 3,
b1100 8,
b1100 =,
b1100 B,
b1100 G,
b1100 L,
b1100 Q,
b1100 V,
b1100 [,
b1100 `,
b1100 e,
b1100 j,
b1100 o,
b1100 t,
b1100 y,
b1100 ~,
b1100 %-
b1100 *-
0l-
x|&
0P-
0&"
xl&
1\-
0j-
xz&
0S-
0a-
b10000 D
b10000 [
b10000 b
1$"
xg&
xf&
b1000000001000001000001000110011 S
0W-
1V-
b1100 :
b1100 E-
b1100 K-
1e-
b100 J-
0d-
0`&
xn&
b0xxxx0 >
b0xxxx0 Y
b0xxxx0 Z&
xu&
b0xxx00 Y&
xt&
0R-
0`-
0g-
b10000 ?
b10000 Z
b10000 i
0}
b11000 h
1|
xj&
b1000000001000001000001000110011 &
b1000000001000001000001000110011 8
0Z-
1h-
0c&
xq&
1x&
b10 I-
0""
xi&
xp&
1w&
b1000000001000001000001000110011 *
b1000000001000001000001000110011 82
b11 72
b1100 2
b11 4-
b11 7-
b11 :-
b11 =-
1X-
1f-
0a&
0o&
0v&
b10 F
b10 C-
b10 A2
1~
b1xx0 \
b1xx0 X&
b1100 '
b1100 B
b11 =
b11 J+
b11 .-
b1010 O
b1010 `
b1010 G+
b1010 B-
b1010 H-
b1 <
b1 K+
b1111 ,
b1111 4
b1111 9
b1111 N
b1111 H+
b10 ;
b10 L+
b110011 %
b110011 A
b110011 X
b110011 A-
b110011 92
b10 E
b10 R
b10 W
b10 W&
b1 @2
0-
0(
0)
b1100 @
b1100 ]
b1100 d
b1100 f
b1000001000000110110011 C
b1000001000000110110011 Q
b1000001000000110110011 U
1!
#140
0!
#145
bx S
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 8
1c-
b11001 H
b11001 I+
b11001 P+
b11001 U+
b11001 Z+
b11001 _+
b11001 d+
b11001 i+
b11001 n+
b11001 s+
b11001 x+
b11001 }+
b11001 $,
b11001 ),
b11001 .,
b11001 3,
b11001 8,
b11001 =,
b11001 B,
b11001 G,
b11001 L,
b11001 Q,
b11001 V,
b11001 [,
b11001 `,
b11001 e,
b11001 j,
b11001 o,
b11001 t,
b11001 y,
b11001 ~,
b11001 %-
b11001 *-
bx *
bx 82
b110 72
b11001 2
1l-
1]-
b11001 '
b11001 B
1j-
1P-
0M
0^-
b11001 :
b11001 E-
b11001 K-
1e-
b11100 J-
1d-
1S-
1a-
0h-
1R-
1`-
1g-
b1111 I-
b1111 F
b1111 C-
b100 A2
00
b10 @2
1!
#150
0!
#155
1[+
b1000 M+
b1000 /-
b1000 >-
1<-
b1 0-
b1 2-
b0 A2
b100 @2
1.
1!
#160
0!
#165
0[+
b0 M+
b0 /-
b0 >-
b1000000001000001000001000110011 S
0<-
b1000000001000001000001000110011 &
b1000000001000001000001000110011 8
b0 0-
b0 2-
b1000000001000001000001000110011 *
b1000000001000001000001000110011 82
b11 72
b1100 2
b1100 '
b1100 B
b1 A2
b11001 ]+
0.
1-
1(
1)
b0 @2
1!
#170
0!
#175
1I
0K
0F-
022
012
0+2
0*2
0$2
0#2
0{1
0z1
0t1
0s1
0m1
0l1
0f1
0e1
0_1
0^1
0X1
0W1
0Q1
0P1
0J1
0I1
0C1
0B1
0<1
0;1
051
041
0.1
0-1
0'1
0&1
0~0
0}0
0w0
0v0
0p0
0o0
0i0
0h0
0b0
0a0
0[0
0Z0
0T0
0S0
0M0
0L0
0F0
0E0
0?0
0>0
080
070
010
000
0*0
0)0
0#0
0"0
0z/
0y/
0s/
0r/
0l/
0k/
0e/
0d/
0^/
0]/
0W/
0V/
0P/
0O/
0I/
0H/
0B/
0A/
0;/
0:/
04/
03/
0-/
0,/
0&/
0%/
0}.
0|.
0v.
0u.
0o.
0n.
0h.
0g.
0a.
0`.
0Z.
0Y.
0S.
0R.
0L.
0K.
0E.
0D.
0>.
0=.
07.
06.
00.
0/.
0).
0(.
0".
0!.
0y-
0x-
0r-
0L
1W-
0c-
0q-
1J
0z&
0\-
0]-
0j-
0k-
0t&
0V-
0^-
1e-
0d-
1l-
1s-
1z-
1#.
1*.
11.
18.
1?.
1F.
1M.
1T.
1[.
1b.
1i.
1p.
1w.
1~.
1'/
1./
15/
1</
1C/
1J/
1Q/
1X/
1_/
1f/
1m/
1t/
1{/
1$0
1+0
120
190
1@0
1G0
1N0
1U0
1\0
1c0
1j0
1q0
1x0
1!1
1(1
1/1
161
1=1
1D1
1K1
1R1
1Y1
1`1
1g1
1n1
1u1
1|1
1%2
1,2
132
b1111111111111111111111111111111111111111111111111111111111111011 H
b1111111111111111111111111111111111111111111111111111111111111011 I+
b1111111111111111111111111111111111111111111111111111111111111011 P+
b1111111111111111111111111111111111111111111111111111111111111011 U+
b1111111111111111111111111111111111111111111111111111111111111011 Z+
b1111111111111111111111111111111111111111111111111111111111111011 _+
b1111111111111111111111111111111111111111111111111111111111111011 d+
b1111111111111111111111111111111111111111111111111111111111111011 i+
b1111111111111111111111111111111111111111111111111111111111111011 n+
b1111111111111111111111111111111111111111111111111111111111111011 s+
b1111111111111111111111111111111111111111111111111111111111111011 x+
b1111111111111111111111111111111111111111111111111111111111111011 }+
b1111111111111111111111111111111111111111111111111111111111111011 $,
b1111111111111111111111111111111111111111111111111111111111111011 ),
b1111111111111111111111111111111111111111111111111111111111111011 .,
b1111111111111111111111111111111111111111111111111111111111111011 3,
b1111111111111111111111111111111111111111111111111111111111111011 8,
b1111111111111111111111111111111111111111111111111111111111111011 =,
b1111111111111111111111111111111111111111111111111111111111111011 B,
b1111111111111111111111111111111111111111111111111111111111111011 G,
b1111111111111111111111111111111111111111111111111111111111111011 L,
b1111111111111111111111111111111111111111111111111111111111111011 Q,
b1111111111111111111111111111111111111111111111111111111111111011 V,
b1111111111111111111111111111111111111111111111111111111111111011 [,
b1111111111111111111111111111111111111111111111111111111111111011 `,
b1111111111111111111111111111111111111111111111111111111111111011 e,
b1111111111111111111111111111111111111111111111111111111111111011 j,
b1111111111111111111111111111111111111111111111111111111111111011 o,
b1111111111111111111111111111111111111111111111111111111111111011 t,
b1111111111111111111111111111111111111111111111111111111111111011 y,
b1111111111111111111111111111111111111111111111111111111111111011 ~,
b1111111111111111111111111111111111111111111111111111111111111011 %-
b1111111111111111111111111111111111111111111111111111111111111011 *-
0U-
0%'
0S-
1Z-
0a-
1h-
1o-
1v-
1}-
1&.
1-.
14.
1;.
1B.
1I.
1P.
1W.
1^.
1e.
1l.
1s.
1z.
1#/
1*/
11/
18/
1?/
1F/
1M/
1T/
1[/
1b/
1i/
1p/
1w/
1~/
1'0
1.0
150
1<0
1C0
1J0
1Q0
1X0
1_0
1f0
1m0
1t0
1{0
1$1
1+1
121
191
1@1
1G1
1N1
1U1
1\1
1c1
1j1
1q1
1x1
1!2
1(2
1/2
162
0O-
04"
0s&
0#'
0R-
0Y-
0`-
0g-
1n-
1u-
1|-
1%.
1,.
13.
1:.
1A.
1H.
1O.
1V.
1].
1d.
1k.
1r.
1y.
1"/
1)/
10/
17/
1>/
1E/
1L/
1S/
1Z/
1a/
1h/
1o/
1v/
1}/
1&0
1-0
140
1;0
1B0
1I0
1P0
1W0
1^0
1e0
1l0
1s0
1z0
1#1
1*1
111
181
1?1
1F1
1M1
1T1
1[1
1b1
1i1
1p1
1w1
1~1
1'2
1.2
152
b1111111111111111111111111111111111111111111111111111111111111011 :
b1111111111111111111111111111111111111111111111111111111111111011 E-
b1111111111111111111111111111111111111111111111111111111111111011 K-
1P-
0+"
02"
0m&
b0x00 Y&
0{&
b1111111111111111111111111111111111111111111111111111111111110000 I-
1N-
0$"
0%"
b10100 D
b10100 [
b10100 b
0,"
bx S
b1 J-
1D-
b100000xxxx0 >
b100000xxxx0 Y
b100000xxxx0 Z&
1H'
1}
b0 h
0|
0&"
b10100 ?
b10100 Z
b10100 i
1-"
0q&
xx&
x!'
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 8
1K'
1""
0)"
10"
0p&
xw&
x~&
bx *
bx 82
b11111111111111111111111111111111111111111111111111111111111110 72
b111111111011 2
b100 4-
b100 7-
b100 :-
b100 =-
1I'
b10 A2
0~
0'"
1."
b0xx0x0 \
b0xx0x0 X&
b1111111111111111111111111111111111111111111111111111111111111011 '
b1111111111111111111111111111111111111111111111111111111111111011 B
b100000 @-
b100 =
b100 J+
b100 .-
b10000000010 E
b10000000010 R
b10000000010 W
b10000000010 W&
b1 @2
0-
0(
0)
b10000 @
b10000 ]
b10000 d
b10000 f
b1000000001000001000001000110011 C
b1000000001000001000001000110011 Q
b1000000001000001000001000110011 U
1!
#180
0!
#185
b100 A2
b10 @2
1!
#190
0!
#195
1`+
b10000 M+
b10000 /-
b10000 >-
1<-
b1 0-
b1 2-
b0 A2
b100 @2
1.
1!
#200
0!
#205
0`+
b0 M+
b0 /-
b0 >-
0<-
b0 0-
b0 2-
b100 72
b1011011011 +
b1011011011 3
b10000 2
b10000 '
b10000 B
b1 A2
b1111111111111111111111111111111111111111111111111111111111111011 b+
0.
1-
1(
1)
b0 @2
1!
#210
0!
#215
x[&
xB+
xA+
x;+
x:+
x4+
x3+
x-+
x,+
x&+
x%+
x}*
x|*
xv*
xu*
xo*
xn*
xh*
xg*
xa*
x`*
xZ*
xY*
xS*
xR*
xL*
xK*
xE*
xD*
x>*
x=*
x7*
x6*
x0*
x/*
x)*
x(*
x"*
x!*
xy)
xx)
xr)
xq)
xk)
xj)
xd)
xc)
x])
x\)
xV)
xU)
xO)
xN)
xH)
xG)
xA)
x@)
x:)
x9)
x3)
x2)
x,)
x+)
x%)
x$)
x|(
x{(
xu(
xt(
xn(
xm(
xg(
xf(
x`(
x_(
xY(
xX(
xR(
xQ(
xK(
xJ(
xD(
xC(
x=(
x<(
x6(
x5(
x/(
x.(
x((
x'(
x!(
x~'
xx'
xw'
xq'
xp'
xj'
xi'
xc'
xb'
x\'
x['
x\-
xc-
xj-
xU'
xI
xL
xU-
bx H
bx I+
bx P+
bx U+
bx Z+
bx _+
bx d+
bx i+
bx n+
bx s+
bx x+
bx }+
bx $,
bx ),
bx .,
bx 3,
bx 8,
bx =,
bx B,
bx G,
bx L,
bx Q,
bx V,
bx [,
bx `,
bx e,
bx j,
bx o,
bx t,
bx y,
bx ~,
bx %-
bx *-
xK
xV-
x]-
xd-
1&"
xO-
xq-
xx-
x!.
x(.
x/.
x6.
x=.
xD.
xK.
xR.
xY.
x`.
xg.
xn.
xu.
x|.
x%/
x,/
x3/
x:/
xA/
xH/
xO/
xV/
x]/
xd/
xk/
xr/
xy/
x"0
x)0
x00
x70
x>0
xE0
xL0
xS0
xZ0
xa0
xh0
xo0
xv0
x}0
x&1
x-1
x41
x;1
xB1
xI1
xP1
xW1
x^1
xe1
xl1
xs1
xz1
x#2
x*2
x12
xF-
xe&
xs&
xz&
x#'
x*'
x1'
x8'
x?'
xF'
xM'
xT'
b11000 D
b11000 [
b11000 b
1$"
xV'
x]'
xd'
xk'
xr'
xy'
x"(
x)(
x0(
x7(
x>(
xE(
xL(
xS(
xZ(
xa(
xh(
xo(
xv(
x}(
x&)
x-)
x4)
x;)
xB)
xI)
xP)
xW)
x^)
xe)
xl)
xs)
xz)
x#*
x**
x1*
x8*
x?*
xF*
xM*
xT*
x[*
xb*
xi*
xp*
xw*
x~*
x'+
x.+
x5+
x<+
xC+
xN-
xJ
xM
xP-
xW-
x^-
xe-
xl-
xk-
xs-
xr-
xz-
xy-
x#.
x".
x*.
x).
x1.
x0.
x8.
x7.
x?.
x>.
xF.
xE.
xM.
xL.
xT.
xS.
x[.
xZ.
xb.
xa.
xi.
xh.
xp.
xo.
xw.
xv.
x~.
x}.
x'/
x&/
x./
x-/
x5/
x4/
x</
x;/
xC/
xB/
xJ/
xI/
xQ/
xP/
xX/
xW/
x_/
x^/
xf/
xe/
xm/
xl/
xt/
xs/
x{/
xz/
x$0
x#0
x+0
x*0
x20
x10
x90
x80
x@0
x?0
xG0
xF0
xN0
xM0
xU0
xT0
x\0
x[0
xc0
xb0
xj0
xi0
xq0
xp0
xx0
xw0
x!1
x~0
x(1
x'1
x/1
x.1
x61
x51
x=1
x<1
xD1
xC1
xK1
xJ1
xR1
xQ1
xY1
xX1
x`1
x_1
xg1
xf1
xn1
xm1
xu1
xt1
x|1
x{1
x%2
x$2
x,2
x+2
bx :
bx E-
bx K-
x32
x22
xR-
xY-
x`-
xg-
xn-
xu-
x|-
x%.
x,.
x3.
x:.
xA.
xH.
xO.
xV.
x].
xd.
xk.
xr.
xy.
x"/
x)/
x0/
x7/
x>/
xE/
xL/
xS/
xZ/
xa/
xh/
xo/
xv/
x}/
x&0
x-0
x40
x;0
xB0
xI0
xP0
xW0
x^0
xe0
xl0
xs0
xz0
x#1
x*1
x11
x81
x?1
xF1
xM1
xT1
x[1
xb1
xi1
xp1
xw1
x~1
x'2
x.2
x52
x`&
x_&
xm&
xt&
x{&
x%'
x$'
x,'
x+'
x3'
x2'
x:'
x9'
xA'
x@'
xH'
xG'
bx >
bx Y
bx Z&
xO'
bx0 Y&
xN'
b11000 ?
b11000 Z
b11000 i
0}
b1000 h
1|
xY'
x`'
xg'
xn'
xu'
x|'
x%(
x,(
x3(
x:(
xA(
xH(
xO(
xV(
x](
xd(
xk(
xr(
xy(
x")
x))
x0)
x7)
x>)
xE)
xL)
xS)
xZ)
xa)
xh)
xo)
xv)
x})
x&*
x-*
x4*
x;*
xB*
xI*
xP*
xW*
x^*
xe*
xl*
xs*
xz*
x#+
x*+
x1+
x8+
x?+
xF+
bx J-
xD-
xS-
xZ-
xa-
xh-
xo-
xv-
x}-
x&.
x-.
x4.
x;.
xB.
xI.
xP.
xW.
x^.
xe.
xl.
xs.
xz.
x#/
x*/
x1/
x8/
x?/
xF/
xM/
xT/
x[/
xb/
xi/
xp/
xw/
x~/
x'0
x.0
x50
x<0
xC0
xJ0
xQ0
xX0
x_0
xf0
xm0
xt0
x{0
x$1
x+1
x21
x91
x@1
xG1
xN1
xU1
x\1
xc1
xj1
xq1
xx1
x!2
x(2
x/2
x62
bx I-
xc&
xq&
x('
x/'
x6'
x='
xD'
xK'
xR'
0""
xb&
xp&
x''
x.'
x5'
x<'
xC'
xJ'
xQ'
xX'
x_'
xf'
xm'
xt'
x{'
x$(
x+(
x2(
x9(
x@(
xG(
xN(
xU(
x\(
xc(
xj(
xq(
xx(
x!)
x()
x/)
x6)
x=)
xD)
xK)
xR)
xY)
x`)
xg)
xn)
xu)
x|)
x%*
x,*
x3*
x:*
xA*
xH*
xO*
xV*
x]*
xd*
xk*
xr*
xy*
x"+
x)+
x0+
x7+
x>+
xE+
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx +
bx 3
bx 2
bx 1-
bx 4-
bx 7-
bx :-
bx =-
xQ-
xX-
x_-
xf-
xm-
xt-
x{-
x$.
x+.
x2.
x9.
x@.
xG.
xN.
xU.
x\.
xc.
xj.
xq.
xx.
x!/
x(/
x//
x6/
x=/
xD/
xK/
xR/
xY/
x`/
xg/
xn/
xu/
x|/
x%0
x,0
x30
x:0
xA0
xH0
xO0
xV0
x]0
xd0
xk0
xr0
xy0
x"1
x)1
x01
x71
x>1
xE1
xL1
xS1
xZ1
xa1
xh1
xo1
xv1
x}1
x&2
x-2
x42
bx F
bx C-
xa&
xh&
xo&
xv&
x}&
x&'
x-'
x4'
x;'
xB'
xI'
xP'
b10 A2
1~
bx \
bx X&
bx '
bx B
bx ?-
bx @-
bx V
bx =
bx J+
bx .-
bx O
bx `
bx G+
bx B-
bx H-
bx <
bx K+
bx ,
bx 4
bx 9
bx N
bx H+
bx ;
bx L+
bx %
bx A
bx X
bx A-
bx 92
b0xxxxxxxxxxxx E
b0xxxxxxxxxxxx R
b0xxxxxxxxxxxx W
b0xxxxxxxxxxxx W&
b1 @2
0-
0(
0)
b10100 @
b10100 ]
b10100 d
b10100 f
bx C
bx Q
bx U
1!
#220
0!
#225
b100 A2
b10 @2
1!
#230
0!
#235
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#240
0!
#245
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b101 72
b10100 2
b10100 '
b10100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#250
0!
#255
04"
02"
0,"
1-"
0+"
0$"
b11100 D
b11100 [
b11100 b
0%"
1}
b0 h
0|
b11100 ?
b11100 Z
b11100 i
1&"
1""
1)"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
1'"
bx '
bx B
b1 @2
0-
0(
0)
b11000 @
b11000 ]
b11000 d
b11000 f
1!
#260
0!
#265
b100 A2
b10 @2
1!
#270
0!
#275
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#280
0!
#285
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b110 72
b11000 2
b11000 '
b11000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#290
0!
#295
14"
12"
1,"
0-"
1+"
1%"
0&"
b100000 D
b100000 [
b100000 b
1$"
b100000 ?
b100000 Z
b100000 i
0}
b111000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b11100 @
b11100 ]
b11100 d
b11100 f
1!
#300
0!
#305
b100 A2
b10 @2
1!
#310
0!
#315
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#320
0!
#325
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b111 72
b11100 2
b11100 '
b11100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#330
0!
#335
0;"
0+"
02"
09"
0$"
0%"
0,"
b100100 D
b100100 [
b100100 b
03"
1}
b0 h
0|
0&"
0-"
b100100 ?
b100100 Z
b100100 i
14"
1""
0)"
00"
17"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
0'"
0."
15"
bx '
bx B
b1 @2
0-
0(
0)
b100000 @
b100000 ]
b100000 d
b100000 f
1!
#340
0!
#345
b100 A2
b10 @2
1!
#350
0!
#355
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#360
0!
#365
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1000 72
b100000 2
b100000 '
b100000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#370
0!
#375
1&"
b101000 D
b101000 [
b101000 b
1$"
b101000 ?
b101000 Z
b101000 i
0}
b1000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b100100 @
b100100 ]
b100100 d
b100100 f
1!
#380
0!
#385
b100 A2
b10 @2
1!
#390
0!
#395
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#400
0!
#405
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1001 72
b100100 2
b100100 '
b100100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#410
0!
#415
0-"
0+"
0$"
b101100 D
b101100 [
b101100 b
0%"
1}
b0 h
0|
b101100 ?
b101100 Z
b101100 i
1&"
1""
1)"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
1'"
bx '
bx B
b1 @2
0-
0(
0)
b101000 @
b101000 ]
b101000 d
b101000 f
1!
#420
0!
#425
b100 A2
b10 @2
1!
#430
0!
#435
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#440
0!
#445
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1010 72
b101000 2
b101000 '
b101000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#450
0!
#455
1-"
1+"
1%"
0&"
b110000 D
b110000 [
b110000 b
1$"
b110000 ?
b110000 Z
b110000 i
0}
b11000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b101100 @
b101100 ]
b101100 d
b101100 f
1!
#460
0!
#465
b100 A2
b10 @2
1!
#470
0!
#475
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#480
0!
#485
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1011 72
b101100 2
b101100 '
b101100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#490
0!
#495
0;"
09"
03"
14"
0+"
02"
0$"
0%"
b110100 D
b110100 [
b110100 b
0,"
1}
b0 h
0|
0&"
b110100 ?
b110100 Z
b110100 i
1-"
1""
0)"
10"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
0'"
1."
bx '
bx B
b1 @2
0-
0(
0)
b110000 @
b110000 ]
b110000 d
b110000 f
1!
#500
0!
#505
b100 A2
b10 @2
1!
#510
0!
#515
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#520
0!
#525
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1100 72
b110000 2
b110000 '
b110000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#530
0!
#535
1&"
b111000 D
b111000 [
b111000 b
1$"
b111000 ?
b111000 Z
b111000 i
0}
b1000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b110100 @
b110100 ]
b110100 d
b110100 f
1!
#540
0!
#545
b100 A2
b10 @2
1!
#550
0!
#555
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#560
0!
#565
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1101 72
b110100 2
b110100 '
b110100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#570
0!
#575
0;"
09"
03"
14"
02"
0,"
1-"
0+"
0$"
b111100 D
b111100 [
b111100 b
0%"
1}
b0 h
0|
b111100 ?
b111100 Z
b111100 i
1&"
1""
1)"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
1'"
bx '
bx B
b1 @2
0-
0(
0)
b111000 @
b111000 ]
b111000 d
b111000 f
1!
#580
0!
#585
b100 A2
b10 @2
1!
#590
0!
#595
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#600
0!
#605
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1110 72
b111000 2
b111000 '
b111000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#610
0!
#615
1;"
19"
13"
04"
12"
1,"
0-"
1+"
1%"
0&"
b1000000 D
b1000000 [
b1000000 b
1$"
b1000000 ?
b1000000 Z
b1000000 i
0}
b1111000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b111100 @
b111100 ]
b111100 d
b111100 f
1!
#620
0!
#625
b100 A2
b10 @2
1!
#630
0!
#635
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#640
0!
#645
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b1111 72
b111100 2
b111100 '
b111100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#650
0!
#655
0B"
0+"
02"
09"
0@"
0$"
0%"
0,"
03"
b1000100 D
b1000100 [
b1000100 b
0:"
1}
b0 h
0|
0&"
0-"
04"
b1000100 ?
b1000100 Z
b1000100 i
1;"
1""
0)"
00"
07"
1>"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
0'"
0."
05"
1<"
bx '
bx B
b1 @2
0-
0(
0)
b1000000 @
b1000000 ]
b1000000 d
b1000000 f
1!
#660
0!
#665
b100 A2
b10 @2
1!
#670
0!
#675
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#680
0!
#685
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10000 72
b1000000 2
b1000000 '
b1000000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#690
0!
#695
1&"
b1001000 D
b1001000 [
b1001000 b
1$"
b1001000 ?
b1001000 Z
b1001000 i
0}
b1000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b1000100 @
b1000100 ]
b1000100 d
b1000100 f
1!
#700
0!
#705
b100 A2
b10 @2
1!
#710
0!
#715
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#720
0!
#725
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10001 72
b1000100 2
b1000100 '
b1000100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#730
0!
#735
0-"
0+"
0$"
b1001100 D
b1001100 [
b1001100 b
0%"
1}
b0 h
0|
b1001100 ?
b1001100 Z
b1001100 i
1&"
1""
1)"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
1'"
bx '
bx B
b1 @2
0-
0(
0)
b1001000 @
b1001000 ]
b1001000 d
b1001000 f
1!
#740
0!
#745
b100 A2
b10 @2
1!
#750
0!
#755
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#760
0!
#765
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10010 72
b1001000 2
b1001000 '
b1001000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#770
0!
#775
1-"
1+"
1%"
0&"
b1010000 D
b1010000 [
b1010000 b
1$"
b1010000 ?
b1010000 Z
b1010000 i
0}
b11000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b1001100 @
b1001100 ]
b1001100 d
b1001100 f
1!
#780
0!
#785
b100 A2
b10 @2
1!
#790
0!
#795
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#800
0!
#805
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10011 72
b1001100 2
b1001100 '
b1001100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#810
0!
#815
04"
0+"
02"
0$"
0%"
b1010100 D
b1010100 [
b1010100 b
0,"
1}
b0 h
0|
0&"
b1010100 ?
b1010100 Z
b1010100 i
1-"
1""
0)"
10"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
0'"
1."
bx '
bx B
b1 @2
0-
0(
0)
b1010000 @
b1010000 ]
b1010000 d
b1010000 f
1!
#820
0!
#825
b100 A2
b10 @2
1!
#830
0!
#835
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#840
0!
#845
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10100 72
b1010000 2
b1010000 '
b1010000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#850
0!
#855
1&"
b1011000 D
b1011000 [
b1011000 b
1$"
b1011000 ?
b1011000 Z
b1011000 i
0}
b1000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b1010100 @
b1010100 ]
b1010100 d
b1010100 f
1!
#860
0!
#865
b100 A2
b10 @2
1!
#870
0!
#875
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#880
0!
#885
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10101 72
b1010100 2
b1010100 '
b1010100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#890
0!
#895
04"
02"
0,"
1-"
0+"
0$"
b1011100 D
b1011100 [
b1011100 b
0%"
1}
b0 h
0|
b1011100 ?
b1011100 Z
b1011100 i
1&"
1""
1)"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
1'"
bx '
bx B
b1 @2
0-
0(
0)
b1011000 @
b1011000 ]
b1011000 d
b1011000 f
1!
#900
0!
#905
b100 A2
b10 @2
1!
#910
0!
#915
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#920
0!
#925
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10110 72
b1011000 2
b1011000 '
b1011000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#930
0!
#935
14"
12"
1,"
0-"
1+"
1%"
0&"
b1100000 D
b1100000 [
b1100000 b
1$"
b1100000 ?
b1100000 Z
b1100000 i
0}
b111000 h
1|
0""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
1~
bx '
bx B
b1 @2
0-
0(
0)
b1011100 @
b1011100 ]
b1011100 d
b1011100 f
1!
#940
0!
#945
b100 A2
b10 @2
1!
#950
0!
#955
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#960
0!
#965
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b10111 72
b1011100 2
b1011100 '
b1011100 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#970
0!
#975
0B"
0@"
0:"
1;"
0+"
02"
09"
0$"
0%"
0,"
b1100100 D
b1100100 [
b1100100 b
03"
1}
b0 h
0|
0&"
0-"
b1100100 ?
b1100100 Z
b1100100 i
14"
1""
0)"
00"
17"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 72
bx 2
b10 A2
0~
0'"
0."
15"
bx '
bx B
b1 @2
0-
0(
0)
b1100000 @
b1100000 ]
b1100000 d
b1100000 f
1!
#980
0!
#985
b100 A2
b10 @2
1!
#990
0!
#995
xf,
xk,
xp,
xu,
xz,
x!-
x&-
x+-
x>,
xC,
xH,
xM,
xR,
xW,
x\,
xa,
xt+
xy+
x~+
x%,
x*,
x/,
x4,
x9,
xQ+
xV+
x[+
x`+
xe+
xj+
xo+
bx 5-
bx 8-
bx ;-
bx M+
bx /-
bx >-
x3-
x6-
x9-
x<-
bx 0-
bx 2-
b0 A2
b100 @2
1.
1!
#1000
0!
#1005
0f,
0k,
0p,
0u,
0z,
0!-
0&-
0+-
0>,
0C,
0H,
0M,
0R,
0W,
0\,
0a,
0t+
0y+
0~+
0%,
0*,
0/,
04,
09,
0Q+
0V+
0[+
0`+
0e+
0j+
0o+
b0 5-
b0 8-
b0 ;-
b0 M+
b0 /-
b0 >-
03-
06-
09-
0<-
b0 0-
b0 2-
b11000 72
b1100000 2
b1100000 '
b1100000 B
b1 A2
0.
1-
1(
1)
b0 @2
1!
#1010
0!
